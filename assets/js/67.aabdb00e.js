(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{315:function(t,e,a){"use strict";a.r(e);var s=a(29),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"环境配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#环境配置"}},[t._v("#")]),t._v(" 环境配置")]),t._v(" "),a("p",[t._v("按照 "),a("a",{attrs:{href:"https://pdos.csail.mit.edu/6.824/labs/lab-mr.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Lab1"),a("OutboundLink")],1),t._v(" Getting started 获取到代码")]),t._v(" "),a("blockquote",[a("p",[t._v("git clone git://g.csail.mit.edu/6.824-golabs-2020 6.824-labs")])]),t._v(" "),a("p",[t._v("但按照 Lab2 执行测试时一直报错")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ go "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v(" run 2A\ngo: cannot "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),t._v(" main module, but found .git/config "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" /Users/xxxx/6.824/labs\n    to create a module there, run:\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("/"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" go mod init\n\n$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("/"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" go mod init "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6.824")]),t._v("/labs\n$ go "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v(" run 2A\nconfig.go:11:8: "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("local")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"../labrpc"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" non-local package\n")])])]),a("p",[t._v("使用 "),a("code",[t._v("go env")]),t._v(" 查看环境变量，发现 "),a("code",[t._v('GO111MODULE="on"')])]),t._v(" "),a("blockquote",[a("p",[t._v("go mode 是一个包管理工具，开 on 相当于默认开启 go mod 管理，但是实验仓库不是通过 go mod 管理的，因此命令行执行 "),a("code",[t._v("go test")]),t._v(" 一直提示使用 go mod")])]),t._v(" "),a("p",[t._v("命令行执行 "),a("code",[t._v("go env -w GO111MODULE=off")]),t._v("，再次使用 "),a("code",[t._v("go env")]),t._v(" 确认一下；执行 "),a("code",[t._v("go test run 2A")]),t._v(" 开始进行单元测试")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ go "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v(" run 2A\nTest "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("2A"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(": initial election "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n--- FAIL: TestInitialElection2A "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(".11s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    config.go:330: expected one leader, got none\nTest "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("2A"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(": election after network failure "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n--- FAIL: TestReElection2A "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(".08s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    config.go:330: expected one leader, got none\nFAIL\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exit")]),t._v(" status "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\nFAIL    _/Users/xxxx/6.824/labs/src/raft   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v(".101s\n")])])]),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("怎么开始")]),t._v(" "),a("p",[t._v("整个实验可以先从 "),a("code",[t._v("src/raft/test_test.go")]),t._v(" 的测试用例入手，在实现的过程中慢慢去了解整体框架。")])]),t._v(" "),a("p",[a("code",[t._v("raft.go")]),t._v(" how to send and receive RPCs")]),t._v(" "),a("h2",{attrs:{id:"part-2a"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#part-2a"}},[t._v("#")]),t._v(" Part 2A")]),t._v(" "),a("h3",{attrs:{id:"测试用例及含义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#测试用例及含义"}},[t._v("#")]),t._v(" 测试用例及含义")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("TestInitialElection2A")])]),t._v(" "),a("li",[a("strong",[t._v("TestReElection2A")])])]),t._v(" "),a("h3",{attrs:{id:"hints"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hints"}},[t._v("#")]),t._v(" Hints")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("RequestVote RPC")]),t._v(" "),a("p",[t._v("Invoked by candidates to gather votes (5.2)")]),t._v(" "),a("p",[a("font",{attrs:{color:"red"}},[a("b",[t._v("Arguments:")])])],1),t._v(" "),a("ul",[a("li",[a("strong",[t._v("term")]),t._v(": candidate's term")]),t._v(" "),a("li",[a("strong",[t._v("candidateid")]),t._v(": candidate requesting vote")]),t._v(" "),a("li",[a("strong",[t._v("lastLogIndex")]),t._v(": index of candidate's last log entry (5.4)")]),t._v(" "),a("li",[a("strong",[t._v("lastLogTerm")]),t._v(": term of candidate's last log entry (5.4)")])]),t._v(" "),a("p",[a("font",{attrs:{color:"red"}},[a("b",[t._v("Result:")])])],1),t._v(" "),a("ul",[a("li",[a("strong",[t._v("term")]),t._v(": currentTerm, for candidate to update itself")]),t._v(" "),a("li",[a("strong",[t._v("voteGranted")]),t._v(": true means candidate received vote")])]),t._v(" "),a("p",[t._v("Receiver implementation:")]),t._v(" "),a("ol",[a("li",[t._v("Reply false if term < currentTerm (5.1)")]),t._v(" "),a("li",[t._v("If votedFor is null or candidateId, and candidate's log is at least as up-to-date as receiver's log, grant vote (5.2 & 5.4)")])])]),t._v(" "),a("h4",{attrs:{id:"状态转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#状态转换"}},[t._v("#")]),t._v(" 状态转换")]),t._v(" "),a("p",[t._v("Raft 中，节点的状态枚举为 leader、candidate、follower；在任一时刻，server 只能为这三种状态中的其中一种。集群有以下性质：")]),t._v(" "),a("ul",[a("li",[t._v("在正常运行期间，集群中只有一个节点为 leader，其他节点为 follower；")]),t._v(" "),a("li",[t._v("所有 client 请求都会路由到 leader，或者是经由 follower 转发（redirects）给 leader；")]),t._v(" "),a("li",[t._v("follower 都是被动接收消息，然后响应 leader（AppendEntries RPC） 或者 candidate（RequestVote RPC） 的请求，不能主动发起请求；")]),t._v(" "),a("li",[t._v("candidate，为开启了一轮新的选主；")])]),t._v(" "),a("p",[t._v("每个任期都是以一次选举开始，一个或多个 condidate 节点想要转变为 leader 节点")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:"/mit-6.824-labs-figures/server-state-transitions.png",width:"407px",height:"168px",alt:"server-state-transitions"}})]),t._v(" "),a("ul",[a("li",[t._v("集群初始化时，所有的 servers 均为 follower 节点，它们的选举超时 "),a("strong",[t._v("election timeout")]),t._v(" 是从固定区间如 150-300ms 取的随机值；")])]),t._v(" "),a("blockquote",[a("p",[t._v("If a follower receives no communication over a period of time call the "),a("em",[a("strong",[t._v("election timeout")])]),t._v(", then it assumes there is no viable leader and begins an election to choose a new leader.")])]),t._v(" "),a("ul",[a("li",[t._v("第一个选举超时的 follower 发现一直未收到 leader 或 candidate 的 RPC（可能是 leader 宕机了，也可能是 leader 和当前 follower 发生了网络隔离）它就认为当前集群中并没有 leader，于是升级为 candidate，向其他 followers 发起投票请求，开始新一轮选举：\n"),a("ul",[a("li",[t._v("选举期间，若收到本轮的 leader 请求，或发现了更新一轮的节点，则自降为 follower")]),t._v(" "),a("li",[t._v("若本轮选举超时了还未收到大多数票，也没收到请求，则重启新一轮选举")]),t._v(" "),a("li",[t._v("若收到来自大多数 follower 的选票，则升级为 leader")])])]),t._v(" "),a("li",[t._v("leader 如果发现有更高任期的节点，则自降为 follower。")])]),t._v(" "),a("p",[t._v("成为 leader 节点后，需要周期性地给其他所有节点发送心跳请求（AppendEntries RPCs that carry no log entries），告诉其他节点：leader 可以 reachable，以保持自己作为 leader 的领导地位。心跳请求的间隔时间需比选举超时的时间间隔小一个量级左右。比如每隔 50ms 并行发送一次心跳请求，对应选举超时时间设为 400ms 左右，才能让 leader 一直保持自己的领导地位。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("初始状态如何触发选主？")]),t._v(" "),a("p",[t._v("初始状态时，如何触发选主呢？或者如何将节点从 follower 状态切换至 candidate 状态？")])]),t._v(" "),a("p",[t._v("Raft 使用心跳机制来触发选主。集群初始化时所有节点均为 follower。一个节点要保持在 follower 状态，需要它定期能够从 leader 或 candidate 接收到 RPC 请求，但现在初始化集群所有节点均处于 follower，因此没有节点会发送 RPC 请求以让 follower 节点保持 follower 状态，这样 follower 节点就会超时，第一个超时的 follower 节点会将其状态切换为 candidate，开启第一轮选主。")]),t._v(" "),a("h4",{attrs:{id:"选主流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#选主流程"}},[t._v("#")]),t._v(" 选主流程")])])}),[],!1,null,null,null);e.default=n.exports}}]);