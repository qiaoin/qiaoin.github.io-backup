(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{282:function(t,s,a){"use strict";a.r(s);var e=a(29),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"lab1-booting-a-pc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lab1-booting-a-pc"}},[t._v("#")]),t._v(" "),a("a",{attrs:{href:"https://pdos.csail.mit.edu/6.828/2018/labs/lab1/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Lab1: Booting a PC"),a("OutboundLink")],1)]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("【实验一于2019年4月3日开始做，环境配置及 Exercises，于4月6日完成，初稿报告4月7日】")]),t._v(" "),a("li",[t._v("【2019年11月2日 第一次 review，发现了很多地方描述不清楚，需要补充上学习操作系统遇到的问题，痛点是什么？】")]),t._v(" "),a("li",[t._v("【TODO】完善 lab1 实验笔记，只剩下 ex12 符号表部分内容")])])]),t._v(" "),a("p",[t._v("实验分为三个部分：")]),t._v(" "),a("ul",[a("li",[t._v("1）"),a("code",[t._v("bootstrap")]),t._v(" 执行流程，熟悉 x86 汇编，QEMU x86 模拟器，PC's power；")]),t._v(" "),a("li",[t._v("2）"),a("code",[t._v("lab/boot")]),t._v(" 目录，bootloader；")]),t._v(" "),a("li",[t._v("3）"),a("code",[t._v("lab/kernel")]),t._v(" 目录，JOS 内核初始化模块。")])]),t._v(" "),a("h2",{attrs:{id:"part-1-pc-bootstrap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#part-1-pc-bootstrap"}},[t._v("#")]),t._v(" Part 1: PC Bootstrap")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Exercise 1")]),t._v(" "),a("p",[t._v("熟悉内联汇编。")])]),t._v(" "),a("p",[t._v("阅读 "),a("a",{attrs:{href:"http://www.delorie.com/djgpp/doc/brennan/brennan_att_inline_djgpp.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Brennan's Guide to Inline Assembly"),a("OutboundLink")],1),t._v("，JOS 里面会使用 AT&T 语法。另外还有更详细的参考资料：")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://pdos.csail.mit.edu/6.828/2018/readings/i386/toc.htm",target:"_blank",rel:"noopener noreferrer"}},[t._v("80386 Programmer's Reference Manual"),a("OutboundLink")],1),t._v(" 包含在 6.828 中将要使用到的所有处理器特性的介绍；")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://software.intel.com/en-us/articles/intel-sdm",target:"_blank",rel:"noopener noreferrer"}},[t._v("IA-32 Intel Architecture Software Developer's Manuals"),a("OutboundLink")],1),t._v("；")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://developer.amd.com/resources/developer-guides-manuals/",target:"_blank",rel:"noopener noreferrer"}},[t._v("AMD64 Architecture Programmer's Manual"),a("OutboundLink")],1),t._v("；")]),t._v(" "),a("li",[t._v("推荐阅读 "),a("a",{attrs:{href:"https://www.linuxprobe.com/gcc-how-to.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("最牛 X 的 GCC 内联汇编"),a("OutboundLink")],1),t._v("，查看更完整的内容，整理的内容足够阅读内联汇编代码。")])]),t._v(" "),a("p",[a("strong",[t._v("【准备工作】为了进行下面的实验，需要进行一些配置")]),t._v("：")]),t._v(" "),a("ol",[a("li",[t._v("按照 "),a("a",{attrs:{href:"https://pdos.csail.mit.edu/6.828/2018/tools.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Tools Used in 6.828"),a("OutboundLink")],1),t._v(" 进行配置，macOS 需要按照网页说明安装定制化的 QEMU 模拟器：\n"),a("ul",[a("li",[t._v("安装 QEMU 的依赖文件，"),a("code",[t._v("brew install $(brew deps qemu)")]),t._v("；")]),t._v(" "),a("li",[t._v("安装定制的 QEMU，假设安装在用户主目录下的 "),a("code",[t._v("~/opt/")]),t._v(" 下，即 "),a("code",[t._v("./configure")]),t._v(" 时指定 "),a("code",[t._v("--prefix=/Users/xxxx/opt")]),t._v("；")]),t._v(" "),a("li",[t._v("Install 步骤 "),a("code",[t._v("PATH=${PATH}:/usr/local/opt/gettext/bin make install")]),t._v("；")])])]),t._v(" "),a("li",[t._v("安装 "),a("code",[t._v("i386")]),t._v(" 相关依赖包 "),a("code",[t._v("brew install i386-elf-binutils i386-elf-gcc i386-elf-gdb")]),t._v("；")]),t._v(" "),a("li",[t._v("不修改各个实验的 Makefile，转而修改用户主目录（"),a("code",[t._v("~")]),t._v("）下的 "),a("code",[t._v(".zshenv")]),t._v(" (或者对应的 "),a("code",[t._v(".bashrc")]),t._v(")，这是对当前用户环境变量的全局修改：\n"),a("ul",[a("li",[t._v("找到 QEMU 可执行文件，"),a("code",[t._v('export PATH="/Users/xxxx/opt/bin:$PATH"')]),t._v("；")]),t._v(" "),a("li",[t._v("添加 "),a("code",[t._v("GCCPREFIX")]),t._v("，"),a("code",[t._v('export GCCPREFIX="i386-elf-"')]),t._v("；")]),t._v(" "),a("li",[t._v("添加 "),a("code",[t._v("gdb")]),t._v(" 同名，"),a("code",[t._v('alias gdb="i386-elf-gdb"')]),t._v("。")])])])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Exercise 2")]),t._v(" "),a("p",[t._v("使用 GDB 进行调试，跟踪 ROM BIOS 指令的执行。")])]),t._v(" "),a("ol",[a("li",[t._v("打开两个终端，"),a("code",[t._v("cd ~/6.828/lab")]),t._v("，到达相同的目录；")]),t._v(" "),a("li",[t._v("一个终端启动 QEMU 模拟器的 GDB 模式执行 "),a("code",[t._v("make qemu-nox-gdb")]),t._v("，QEMU 在第一条指令之前暂停，等待 GDB 的连接；")]),t._v(" "),a("li",[t._v("另一个终端执行 "),a("code",[t._v("gdb")]),t._v("（这里不是如 "),a("a",{attrs:{href:"https://pdos.csail.mit.edu/6.828/2018/labs/lab1/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Lab 1"),a("OutboundLink")],1),t._v(" 官网说明的执行 "),a("code",[t._v("make gdb")]),t._v("，而是执行 "),a("code",[t._v("gdb")]),t._v("，需要注意）。")])]),t._v(" "),a("p",[t._v("最开始是一条跳转指令，跳转到 "),a("code",[t._v("0xfe05b")]),t._v(" 进行执行：")]),t._v(" "),a("div",{staticClass:"language-shell-session extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell-session"}},[a("code",[a("span",{pre:!0,attrs:{class:"token info punctuation"}},[t._v("[f000"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token path"}},[t._v("fff0]    0xffff0:  ljmp   ")])]),a("span",{pre:!0,attrs:{class:"token command"}},[a("span",{pre:!0,attrs:{class:"token shell-symbol important"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token bash language-bash"}},[t._v("0xf000,"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$0xe05b")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 跳转指令")])])]),t._v("\n")])])]),a("p",[t._v("使用 "),a("code",[t._v("si")]),t._v(" 单步执行：")]),t._v(" "),a("div",{staticClass:"language-shell-session extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell-session"}},[a("code",[a("span",{pre:!0,attrs:{class:"token info punctuation"}},[t._v("[f000"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token path"}},[t._v("d15f]    0xfd15f:   cli                    ")])]),a("span",{pre:!0,attrs:{class:"token command"}},[a("span",{pre:!0,attrs:{class:"token shell-symbol important"}},[t._v("#")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token bash language-bash"}},[t._v("关闭中断")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token output"}},[t._v("[f000:d171]    0xfd171:   lidtw  %cs:0x6ab8\n")]),a("span",{pre:!0,attrs:{class:"token info punctuation"}},[t._v("[f000"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token path"}},[t._v("d177]    0xfd177:   lgdtw  %cs:0x6a74      ")])]),a("span",{pre:!0,attrs:{class:"token output"}},[t._v("#\n[f000:d17d]    0xfd17d:   mov    %cr0,%eax\n")]),a("span",{pre:!0,attrs:{class:"token info punctuation"}},[t._v("[f000"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token path"}},[t._v("d180]    0xfd180:   or     ")])]),a("span",{pre:!0,attrs:{class:"token command"}},[a("span",{pre:!0,attrs:{class:"token shell-symbol important"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token bash language-bash"}},[t._v("0x1,%eax")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token info punctuation"}},[t._v("[f000"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token path"}},[t._v("d184]    0xfd184:   mov    %eax,%cr0       ")])]),a("span",{pre:!0,attrs:{class:"token command"}},[a("span",{pre:!0,attrs:{class:"token shell-symbol important"}},[t._v("#")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token bash language-bash"}},[t._v("cr0 最低位置 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")])])]),t._v("\n")])])]),a("p",[t._v("BIOS 建立中断描述符表和初始化一系列硬件设备，进行一些检验工作，之后搜索可启动的设备，"),a("strong",[t._v("加载该存储设备上的第一个扇区的 512 字节到内存的 0x7C00")]),t._v("（这是 BIOS 固件完成的），然后跳转到 "),a("code",[t._v("@0x7C00")]),t._v(" 的第一条指令开始执行（"),a("strong",[t._v("将控制权转移给 bootloader")]),t._v("）。")]),t._v(" "),a("p",[t._v("设置断点在 "),a("code",[t._v("0x7c00")]),t._v("，"),a("code",[t._v("b *0x7c00")]),t._v("，继续执行 "),a("code",[t._v("c(ontinue)")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-shell-session extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell-session"}},[a("code",[a("span",{pre:!0,attrs:{class:"token output"}},[t._v("[   0:7c00] => 0x7c00:    cli\n[   0:7c01] => 0x7c01:    cld\n\n[   0:7c1e] => 0x7c1e:    lgdtw  0x7c64\n[   0:7c23] => 0x7c23:    mov    %cr0,%eax\n")]),a("span",{pre:!0,attrs:{class:"token info punctuation"}},[t._v("[   0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token path"}},[t._v("7c26] => 0x7c26:    or     ")])]),a("span",{pre:!0,attrs:{class:"token command"}},[a("span",{pre:!0,attrs:{class:"token shell-symbol important"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token bash language-bash"}},[t._v("0x1,%eax")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token output"}},[t._v("[   0:7c2a] => 0x7c2a:    mov    %eax,%cr0\n")]),a("span",{pre:!0,attrs:{class:"token info punctuation"}},[t._v("[   0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token path"}},[t._v("7c2d] => 0x7c2d:    ljmp   ")])]),a("span",{pre:!0,attrs:{class:"token command"}},[a("span",{pre:!0,attrs:{class:"token shell-symbol important"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token bash language-bash"}},[t._v("0x8,"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$0x7c32")])])]),t._v("\n")])])]),a("p",[t._v("执行 "),a("code",[t._v("x/Ni ADDR")]),t._v(" 打印从 "),a("code",[t._v("ADDR")]),t._v(" 地址开始的连续 "),a("code",[t._v("N")]),t._v(" 条汇编指令（以上关于 BIOS 的部分不是 6.828 重点关注的部分，执行时单步跟踪能够看出一点端倪，具体在 lab 实验目录中没有源码对应）。")]),t._v(" "),a("h2",{attrs:{id:"part-2-the-boot-loader"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#part-2-the-boot-loader"}},[t._v("#")]),t._v(" Part 2: The Boot Loader")]),t._v(" "),a("p",[a("code",[t._v("bootloader")]),t._v(" 主要做三件事：")]),t._v(" "),a("ul",[a("li",[t._v("1）从实模式（real mode）切换到保护模式（32-bit protected mode）。在实模式下只能寻址 1MB 的内存空间（2^20），在保护模式下能够寻址 4GB（2^32），这样就能够访问处理器全部的物理内存空间；")]),t._v(" "),a("li",[t._v("2）读取内核映像到内存中固定位置，ELF 文件格式（解析 ELF 文件，将内核需要加载进入内存的段 <有 LOAD 标记的段> 加载进内存，放置在指定的加载地址）；")]),t._v(" "),a("li",[t._v("3）把控制权转移给 JOS，即将 "),a("code",[t._v("CS:EIP")]),t._v(" 的值指向操作系统内核所在内存中的起始点（"),a("code",[t._v(".text")]),t._v(" 段中程序开始执行时的起始地址）。")])]),t._v(" "),a("p",[t._v("两个源文件代码的阅读：")]),t._v(" "),a("ul",[a("li",[a("strong",[a("code",[t._v("boot/boot.S")])]),t._v("：执行 "),a("code",[t._v("start")]),t._v(" 函数，进行一定的初始化，完成从实模式到保护模式的切换（"),a("code",[t._v("CR0")]),t._v(" 最低位设置为 1），并调用 "),a("code",[t._v("bootmain")]),t._v(" 函数，具体细节参见 "),a("code",[t._v("bootloader")]),t._v(" 实模式切换到保护模式（Google 一下）；")]),t._v(" "),a("li",[a("strong",[a("code",[t._v("boot/main.c")])]),t._v("："),a("code",[t._v("bootloader")]),t._v(" 让 CPU 进入保护模式后，下一步的工作就是"),a("strong",[t._v("从硬盘上加载并运行 OS")]),t._v("。考虑到实现的简单性，"),a("code",[t._v("bootloader")]),t._v(" 访问硬盘都是 LBA 模式 的 "),a("strong",[t._v("PIO")]),t._v("（Program IO）方式，即"),a("strong",[t._v("所有的 IO 操作是通过 CPU 访问硬盘的 IO 地址寄存器完成")]),t._v("。当前硬盘数据是储存到硬盘扇区中，一个扇区大小为 512 字节。读一个扇区的流程（可参看 "),a("code",[t._v("readsect")]),t._v(" 函数实现，大致理解就可以）大致如下：\n"),a("ol",[a("li",[t._v("等待磁盘准备好；")]),t._v(" "),a("li",[t._v("发出读取扇区的命令；")]),t._v(" "),a("li",[t._v("等待磁盘准备好；")]),t._v(" "),a("li",[t._v("把磁盘扇区数据读到指定内存。")])])])]),t._v(" "),a("p",[t._v("主要查看 "),a("code",[t._v("bootmain")]),t._v(" 函数实现：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" SECTSIZE    512                      ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 扇区大小 512 字节")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" ELFHDR      ((struct Elf *) 0x10000) ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将 0x10000 设置为内核起始地址")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bootmain")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Proghdr")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ph"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("eph"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从硬盘的第一个扇区（偏移为 0）读取 8*512=4096byte （4KB）的内容到内存单元 ELFHDR 处")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("readseg")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("uint32_t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" ELFHDR"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" SECTSIZE"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1.")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// is this a valid ELF?")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ELFHDR"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("e_magic "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" ELF_MAGIC"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("goto")]),t._v(" bad"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// load each program segment (ignores ph flags)")]),t._v("\n    ph "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Proghdr")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("uint8_t "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" ELFHDR "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" ELFHDR"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("e_phoff"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2.")]),t._v("\n    eph "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ph "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" ELFHDR"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("e_phnum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// program header 的个数")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" ph "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" eph"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" ph"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// p_pa is the load address of this segment (as well")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// as the physical address)")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("readseg")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ph"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("p_pa"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ph"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("p_memsz"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ph"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("p_offset"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3.")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// call the entry point from the ELF header")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// note: does not return!")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ELFHDR"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("e_entry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("关键的几行代码已经标注序号，需要结合下面 ELF 文件格式来进行理解。")]),t._v(" "),a("ol",[a("li",[t._v("将 kernel 从磁盘中读取到内存的指定位置 "),a("code",[t._v("ELFHDR")]),t._v("，"),a("code",[t._v("0x10000")]),t._v("；")]),t._v(" "),a("li",[t._v("对 "),a("code",[t._v("ELFHDR")]),t._v(" 处的 ELF header 进行解析，得到 program header table 的起始地址存放在 "),a("code",[t._v("ph")]),t._v(" 中，结束地址存放在 "),a("code",[t._v("eph")]),t._v(" 中。这里将 "),a("code",[t._v("ELFHDR")]),t._v(" 进行转型为 "),a("code",[t._v("uint8_t")]),t._v(" 指针，这样在进行指针加法时，这个指针变量按照 byte 的偏移来加，得到 program header table 的起始地址，并转换为 "),a("code",[t._v("struct Proghdr")]),t._v(" 类型指针："),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("ph "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Proghdr")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("uint8_t "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" ELFHDR "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" ELFHDR"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("e_phoff"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),a("li",[t._v("根据每个 program header 的信息从磁盘读取各个段进入内存指定位置，从 "),a("code",[t._v("ph->p_offset")]),t._v(" 处开始拷贝 "),a("code",[t._v("ph->p_memsz")]),t._v(" 个 bytes 到 "),a("code",[t._v("ph->p_pa")]),t._v("："),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("readseg")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ph"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("p_pa"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ph"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("p_memsz"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ph"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("p_offset"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),a("li",[t._v("在将内核加载到内存中后，转移到 entry point 开始执行，即 JOS 开始运行时要执行的第一条指令的地址。这里将 "),a("code",[t._v("e_entry")]),t._v(" 转换为一个无参数无返回值的函数，并执行函数调用："),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ELFHDR"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("e_entry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Exercise 3")]),t._v(" "),a("p",[t._v("使用 GDB 单步跟踪执行。")])]),t._v(" "),a("p",[t._v("设置断点在 "),a("code",[t._v("0x7c00")]),t._v("，"),a("code",[t._v("b *0x7c00")]),t._v("，另外还设置两个断点：")]),t._v(" "),a("ul",[a("li",[t._v("1）"),a("code",[t._v("b *0x7d56")]),t._v("，"),a("code",[t._v("bootmain")]),t._v(" 函数 "),a("code",[t._v("for")]),t._v(" 循环开始处；")]),t._v(" "),a("li",[t._v("2）"),a("code",[t._v("b *0x7d71")]),t._v("，ELF 调用 entry point 处。")])]),t._v(" "),a("p",[t._v("继续执行 "),a("code",[t._v("c(ontinue)")]),t._v("，就可以看到 "),a("code",[t._v("for")]),t._v(" 循环处的断点 hit 3 次（最后一次是判断 "),a("code",[t._v("for")]),t._v(" 循环条件不成立），说明根据 ELF header 信息读入了另外 2 个段（"),a("code",[t._v(".text")]),t._v("/"),a("code",[t._v(".data")]),t._v("，可以使用 "),a("code",[t._v("i386-elf-objdump -x obj/kern/kernel")]),t._v(" 命令查看到 Program Header）。执行到达 "),a("code",[t._v("0x7d71")]),t._v(" 处时，对应汇编指令为：")]),t._v(" "),a("div",{staticClass:"language-shell-session extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell-session"}},[a("code",[a("span",{pre:!0,attrs:{class:"token output"}},[t._v("0x7d71: call   *0x10018\n")])])])]),a("p",[t._v("但 "),a("code",[t._v("si")]),t._v(" 单步执行的真实地址为 "),a("code",[t._v("0x10000c")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-shell-session extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell-session"}},[a("code",[a("span",{pre:!0,attrs:{class:"token output"}},[t._v("(gdb) x/10i 0x10000c\n")]),a("span",{pre:!0,attrs:{class:"token info punctuation"}},[t._v("=> 0x10000c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token path"}},[t._v("    movw   ")])]),a("span",{pre:!0,attrs:{class:"token command"}},[a("span",{pre:!0,attrs:{class:"token shell-symbol important"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token bash language-bash"}},[t._v("0x1234,0x472")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token info punctuation"}},[t._v("   0x100015"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token path"}},[t._v("    mov    ")])]),a("span",{pre:!0,attrs:{class:"token command"}},[a("span",{pre:!0,attrs:{class:"token shell-symbol important"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token bash language-bash"}},[t._v("0x110000,%eax")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token output"}},[t._v("   0x10001a:    mov    %eax,%cr3\n   0x10001d:    mov    %cr0,%eax\n")]),a("span",{pre:!0,attrs:{class:"token info punctuation"}},[t._v("   0x100020"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token path"}},[t._v("    or     ")])]),a("span",{pre:!0,attrs:{class:"token command"}},[a("span",{pre:!0,attrs:{class:"token shell-symbol important"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token bash language-bash"}},[t._v("0x80010001,%eax")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token output"}},[t._v("   0x100025:    mov    %eax,%cr0\n")]),a("span",{pre:!0,attrs:{class:"token info punctuation"}},[t._v("   0x100028"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token path"}},[t._v("    mov    ")])]),a("span",{pre:!0,attrs:{class:"token command"}},[a("span",{pre:!0,attrs:{class:"token shell-symbol important"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token bash language-bash"}},[t._v("0xf010002f,%eax")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token output"}},[t._v("   0x10002d:    jmp    *%eax                <- 0xf010002f <relocated>\n")]),a("span",{pre:!0,attrs:{class:"token info punctuation"}},[t._v("   0x10002f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token path"}},[t._v("    mov    ")])]),a("span",{pre:!0,attrs:{class:"token command"}},[a("span",{pre:!0,attrs:{class:"token shell-symbol important"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token bash language-bash"}},[t._v("0x0,%ebp")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token info punctuation"}},[t._v("   0x100034"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token path"}},[t._v("    mov    ")])]),a("span",{pre:!0,attrs:{class:"token command"}},[a("span",{pre:!0,attrs:{class:"token shell-symbol important"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token bash language-bash"}},[t._v("0xf0110000,%esp")])]),t._v("\n")])])]),a("p",[t._v("回答以下 4 个问题：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("在哪个时间点处理器开始执行 32-bit 代码？导致从 16-bit 切换到 32-bit 的关键操作是什么？")]),t._v(" "),a("p",[t._v("使能保护模式（置 "),a("code",[t._v("CR0")]),t._v(" 最低位为 1）和段机制（建立好全局描述符表 "),a("code",[t._v("GDT")]),t._v("）。执行一条长跳转指令 "),a("code",[t._v("ljmp cs:eip")]),t._v(" 转而执行 32-bit 模式。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("bootloader")]),t._v(" 执行的最后一条指令是什么？kernel 在加载之后，执行的第一条指令是什么？")]),t._v(" "),a("div",{staticClass:"language-shell-session extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell-session"}},[a("code",[a("span",{pre:!0,attrs:{class:"token output"}},[t._v("call   *0x10018\n")]),a("span",{pre:!0,attrs:{class:"token info punctuation"}},[t._v("0x10000c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token path"}},[t._v("  movw   ")])]),a("span",{pre:!0,attrs:{class:"token command"}},[a("span",{pre:!0,attrs:{class:"token shell-symbol important"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token bash language-bash"}},[t._v("0x1234,0x472")])]),t._v("\n")])])]),a("p",[t._v("这两个地址不相同，这是为什么？因为开启了"),a("strong",[t._v("分页机制")]),t._v("，虚拟地址与物理地址之间的映射关系已建立好。")])]),t._v(" "),a("li",[a("p",[t._v("kernel 执行的第一条指令的地址是多少？")]),t._v(" "),a("p",[a("code",[t._v("0x10000c")])])]),t._v(" "),a("li",[a("p",[t._v("为了将整个 kernel 从磁盘加载到内存中，"),a("code",[t._v("bootloader")]),t._v(" 是如何确定需要读入的扇区数目的？这些信息存储在哪里？")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// load each program segment (ignores ph flags)")]),t._v("\nph "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Proghdr")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("uint8_t "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" ELFHDR "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" ELFHDR"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("e_phoff"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ii")]),t._v("\neph "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ph "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" ELFHDR"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("e_phnum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" ph "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" eph"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" ph"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// p_pa is the load address of this segment (as well")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// as the physical address)")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("readseg")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ph"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("p_pa"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ph"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("p_memsz"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ph"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("p_offset"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3.")]),t._v("\n")])])]),a("p",[t._v("在 ELF 文件的 program header 中包含总共需要读取的数据大小，同时对于需加载进内存中的各个段，也标注了在磁盘上的偏移位置和大小。")])])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Exercise 4")]),t._v(" "),a("p",[t._v("C 语言中的指针。")])]),t._v(" "),a("p",[t._v("C 程序设计语言 第 5 章 数组与指针 5.1 - 5.5（待读，之前已经看过好几遍了）。")]),t._v(" "),a("h3",{attrs:{id:"elf-文件格式（没有很明白，20191102晚上11点57分）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#elf-文件格式（没有很明白，20191102晚上11点57分）"}},[t._v("#")]),t._v(" ELF 文件格式（没有很明白，20191102晚上11点57分）")]),t._v(" "),a("p",[t._v("ELF header + 待加载的信息（包含连续的多个段，数据段和代码段等，这些段需要从磁盘加载到内存的指定地址）。"),a("code",[t._v("bootloader")]),t._v(" 不会去修改数据段和代码段，只是将它们加载进内存，然后将控制权转移给这些程序进行执行。")]),t._v(" "),a("p",[t._v("ELF header 长度固定（fixed-length），后跟可变长度（variable-length）的 program header，列出了要加载的各个程序段（program sections）。"),a("code",[t._v("inc/elf.h")]),t._v(" 定义了 "),a("code",[t._v("ELF header")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Elf")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ELF 文件头")]),t._v("\n    uint32_t e_magic"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// must equal ELF_MAGIC")]),t._v("\n    uint8_t e_elf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    uint16_t e_type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    uint16_t e_machine"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    uint32_t e_version"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    uint32_t e_entry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 程序开始执行的起始地址")]),t._v("\n    uint32_t e_phoff"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// program header table 的起始位置")]),t._v("\n    uint32_t e_shoff"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// section header 的起始位置")]),t._v("\n    uint32_t e_flags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    uint16_t e_ehsize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ELF 文件本身的大小")]),t._v("\n    uint16_t e_phentsize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    uint16_t e_phnum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// program header 的个数")]),t._v("\n    uint16_t e_shentsize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    uint16_t e_shnum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    uint16_t e_shstrndx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Proghdr")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// program header table")]),t._v("\n    uint32_t p_type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    uint32_t p_offset"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    uint32_t p_va"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 虚拟地址")]),t._v("\n    uint32_t p_pa"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 物理地址")]),t._v("\n    uint32_t p_filesz"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 段在文件中的大小")]),t._v("\n    uint32_t p_memsz"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 段在内存中的大小")]),t._v("\n    uint32_t p_flags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 读写执行权限")]),t._v("\n    uint32_t p_align"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("【TODO】这里为什么需要 "),a("code",[t._v("p_filesz")]),t._v("、"),a("code",[t._v("p_memsz")]),t._v(" 两个长度呢？在之后会介绍到，"),a("code",[t._v(".bss")]),t._v(" 在磁盘上没有存储空间，在内存中程序需要为其分配空间。")]),t._v(" "),a("p",[a("code",[t._v("bootloader")]),t._v(" 利用 ELF program header 来决定如何加载各 program sections，而 program header 指定应该读取 ELF 对象的哪个部分进内存，以及应该放在哪里。")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:"/mit-6.828-lab1-figures/elf-layout.png",width:"322px",height:"358px",alt:"elf-layout"}})]),t._v(" "),a("div",{attrs:{align:"center"}},[a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Executable_and_Linkable_Format"}},[t._v("Wikipedia")])]),t._v(" "),a("p",[t._v("在 6.828 实验中将用到的 program sections：")]),t._v(" "),a("ul",[a("li",[a("strong",[a("code",[t._v(".text")])]),t._v("：代码段。程序的可执行指令；")]),t._v(" "),a("li",[a("code",[t._v(".rodata")]),t._v("：只读数据段。例如 C 编译器产生的 ASCII 字符串常量；")]),t._v(" "),a("li",[a("strong",[a("code",[t._v(".stab")])]),t._v("：符号表部分，在程序报错时提供错误信息；")]),t._v(" "),a("li",[a("strong",[a("code",[t._v(".stabstr")])]),t._v("：符号表字符串部分；")]),t._v(" "),a("li",[a("strong",[a("code",[t._v(".data")])]),t._v("：数据段。已初始化的全局变量和局部静态变量；")]),t._v(" "),a("li",[a("code",[t._v(".bss")]),t._v("：为未初始化的全局变量和局部静态变量预留位置，但并没有内容，因此在文件中也不占据磁盘空间（因此需要 "),a("code",[t._v("p_filesz")]),t._v("、"),a("code",[t._v("p_memsz")]),t._v(" 两个长度）。由于未初始化的全局变量和局部静态变量默认值都是 0，本来它们也可以被放在 "),a("code",[t._v(".data")]),t._v(" 段里，但是因为它们都是 0，为它们在 "),a("code",[t._v(".data")]),t._v(" 段分配空间并存放数据 0 是没有必要的；")]),t._v(" "),a("li",[t._v("...")])]),t._v(" "),a("div",{staticClass:"language-shell-session extra-class"},[a("div",{staticClass:"highlight-lines"},[a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-shell-session"}},[a("code",[a("span",{pre:!0,attrs:{class:"token output"}},[t._v("i386-elf-objdump -h obj/kern/kernel\n\nobj/kern/kernel:     file format elf32-i386\nSections:\nIdx Name          Size      VMA       LMA       File off  Algn\n  0 .text         0000171e  f0100000  00100000  00001000  2**2\n                  CONTENTS, ALLOC, LOAD, READONLY, CODE\n  1 .rodata       00000714  f0101720  00101720  00002720  2**5\n                  CONTENTS, ALLOC, LOAD, READONLY, DATA\n  2 .stab         000040ed  f0101e34  00101e34  00002e34  2**2\n                  CONTENTS, ALLOC, LOAD, READONLY, DATA\n  3 .stabstr      00001957  f0105f21  00105f21  00006f21  2**0\n                  CONTENTS, ALLOC, LOAD, READONLY, DATA\n  4 .data         0000a300  f0108000  00108000  00009000  2**12\n                  CONTENTS, ALLOC, LOAD, DATA\n  5 .bss          00000648  f0112300  00112300  00013300  2**5\n                  CONTENTS, ALLOC, LOAD, DATA\n  6 .debug ......\n  ......\n")])])])]),a("p",[t._v("得到 ELF 文件各个段的基本信息，可以知道很多段都是 Debug 信息（program loader 不会将这些段加载进内存）。")]),t._v(" "),a("p",[t._v("查看更详细的信息：")]),t._v(" "),a("div",{staticClass:"language-shell-session extra-class"},[a("div",{staticClass:"highlight-lines"},[a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-shell-session"}},[a("code",[a("span",{pre:!0,attrs:{class:"token output"}},[t._v("i386-elf-objdump -x obj/kern/kernel\n\nobj/kern/kernel:     file format elf32-i386\nobj/kern/kernel\narchitecture: i386, flags 0x00000112:\nEXEC_P, HAS_SYMS, D_PAGED\nstart address 0x0010000c\n\nProgram Header:\n    LOAD off    0x00001000 vaddr 0xf0100000 paddr 0x00100000 align 2**12\n         filesz 0x00007878 memsz 0x00007878 flags r-x\n    LOAD off    0x00009000 vaddr 0xf0108000 paddr 0x00108000 align 2**12\n         filesz 0x0000a948 memsz 0x0000a948 flags rw-\n\nSections:\nIdx Name          Size      VMA       LMA       File off  Algn\n  0 .text         0000171e  f0100000  00100000  00001000  2**2\n                  CONTENTS, ALLOC, LOAD, READONLY, CODE\n  1 .rodata       ...\n  2 .stab         ...\n  3 .stabstr      ...\n  4 .data         0000a300  f0108000  00108000  00009000  2**12\n                  CONTENTS, ALLOC, LOAD, DATA\n  ......\n")])])])]),a("p",[t._v("对于内核映像，其链接地址和加载地址不同，内核希望 "),a("code",[t._v("bootloader")]),t._v(" 将其加载到低物理地址处（"),a("strong",[a("code",[t._v("0x00100000")])]),t._v(" 最下面的 "),a("code",[t._v("1MB")]),t._v(" 处），但是期望在高地址（虚拟地址）处进行执行（"),a("strong",[a("code",[t._v("0xf0100000")])]),t._v("）。这里带标识 "),a("code",[t._v("LOAD")]),t._v(" 的 Program Header 段（可能一个段包含多个 Sections，"),a("code",[t._v(".data")]),t._v("/"),a("code",[t._v(".text")]),t._v("/etc.），即多个 Sections 被同时加载进入内存。")]),t._v(" "),a("h3",{attrs:{id:"链接地址和加载地址（link-address-and-load-address）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链接地址和加载地址（link-address-and-load-address）"}},[t._v("#")]),t._v(" 链接地址和加载地址（link address and load address）")]),t._v(" "),a("p",[t._v("我们关注 "),a("code",[t._v(".text")]),t._v(" 段的 "),a("code",[t._v("VMA")]),t._v("(or link address，虚拟地址) 和 "),a("code",[t._v("LMA")]),t._v("(or load address，物理地址)。段的 "),a("code",[t._v("LMA")]),t._v("(load address)指定了将这个段加载进内存时需要放置的物理地址。段的 "),a("code",[t._v("VMA")]),t._v("(link address)指定了程序执行时这个段需要放置在内存中的虚拟地址。为了保证程序能够正常的执行，需要进行链接。")]),t._v(" "),a("p",[a("strong",[t._v("链接地址实际上就是程序假设自己在内存中被存放的位置，即编译器在编译的时候会认定程序将会连续的存放在从链接地址起始处开始的内存空间。而加载地址是可执行程序在物理内存中真正存放的位置")]),t._v("，在 JOS 中，"),a("code",[t._v("bootloader")]),t._v(" 是被 BIOS 装载到内存的，由于 BIOS 实际上规定 "),a("code",[t._v("bootloader")]),t._v(" 要被存放在物理内存的 "),a("code",[t._v("0x7c00")]),t._v(" 处，于是不论程序的链接地址怎么改变，它装载在内存中的位置（加载地址）都不会变化。")]),t._v(" "),a("p",[a("strong",[t._v("链接地址是指令运行时的地址，加载地址是指令加载到内存中的地址。实模式下这两个地址是一样的，因为没有开启分页机制，指令执行的时候就没有地址映射关系")]),t._v("。")]),t._v(" "),a("p",[t._v("我们可以看到 "),a("code",[t._v("bootloader")]),t._v(" 的链接地址和加载地址是相等的，为 "),a("code",[t._v("0x7c00")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-shell-session extra-class"},[a("div",{staticClass:"highlight-lines"},[a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-shell-session"}},[a("code",[a("span",{pre:!0,attrs:{class:"token output"}},[t._v("i386-elf-objdump -h obj/boot/boot.out\n\nobj/boot/boot.out:     file format elf32-i386\nSections:\nIdx Name          Size      VMA       LMA       File off  Algn\n  0 .text         0000018c  00007c00  00007c00  00000054  2**2\n                  CONTENTS, ALLOC, LOAD, CODE\n  1 .eh_frame     0000009c  00007d8c  00007d8c  000001e0  2**2\n                  CONTENTS, ALLOC, LOAD, READONLY, DATA\n  2 .stab         00000744  00000000  00000000  0000027c  2**2\n                  CONTENTS, READONLY, DEBUGGING\n  3 .stabstr      000008e1  00000000  00000000  000009c0  2**0\n                  CONTENTS, READONLY, DEBUGGING\n  4 .comment      00000011  00000000  00000000  000012a1  2**0\n                  CONTENTS, READONLY\n")])])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Exercise 5")]),t._v(" "),a("p",[t._v("修改 "),a("code",[t._v("boot/Makefrag")]),t._v("，将 bootloader 的 link address 改为非 "),a("code",[t._v("0x7c00")]),t._v(" 的数值，看看会出现什么问题？")])]),t._v(" "),a("p",[t._v("在 "),a("code",[t._v("boot/Makefrag")]),t._v(" 中指定了 "),a("code",[t._v("bootloader")]),t._v(" 的链接地址 "),a("code",[t._v("-Ttext 0x7C00")]),t._v("，现在我们将链接地址修改为 "),a("code",[t._v("0x8C00")]),t._v("，重新编译：")]),t._v(" "),a("ol",[a("li",[t._v("设置断点 "),a("code",[t._v("b *0x7c00")]),t._v("，BIOS 一定会将 "),a("code",[t._v("bootloader")]),t._v(" 加载到这个位置；")]),t._v(" "),a("li",[a("code",[t._v("si")]),t._v(" 单步跟踪执行，执行到 "),a("code",[t._v("0x7c2d: ljmp $0x8,$0x8c32")]),t._v(" 指令时发生错误；")]),t._v(" "),a("li",[t._v("查看编译同时生成的反汇编文件 "),a("code",[t._v("obj/boot/boot.asm")]),t._v("，其中显示了汇编指令和相应的链接地址，由于我们修改了 bootloader 的链接地址为 "),a("code",[t._v("0x8c00")]),t._v("，"),a("code",[t._v("“ljmp $0x8,$0x8c32”")]),t._v(" 这条指令在 "),a("code",[t._v("boot.asm")]),t._v(" 文件中显示的实际汇编地址为 "),a("code",[t._v("0x8c2d")]),t._v("，其后的 "),a("code",[t._v("protcseg")]),t._v(" 标识的指令的链接地址为 "),a("code",[t._v("0x8c32")]),t._v("，即 "),a("code",[t._v("si")]),t._v(" 单步执行到 "),a("code",[t._v("0x8c2d")]),t._v(" 处需要跳转到的标识符地址；")]),t._v(" "),a("li",[t._v("CPU 报错？为什么会报错呢？链接是怎么做的？")])]),t._v(" "),a("p",[a("code",[t._v("VMA")]),t._v("/"),a("code",[t._v("LMA")]),t._v(" 是给加载器做参考，告诉加载器“需要将某个段加载到某某地址”，但现在连操作系统都还没有运行起来，更不会有加载器。因此，"),a("code",[t._v("bootloader")]),t._v(" 的源代码还是会被加载到内存的 "),a("code",[t._v("0x7c00")]),t._v(" 处（因为 BIOS 在 ROM，里面的程序代码是在出厂时就已经规定好了的，将磁盘的第一个扇区加载到内存的 "),a("code",[t._v("0x7c00")]),t._v(" 处）。链接最重要的一步是符号重定位（symbol relocation），在源代码 "),a("code",[t._v("boot/boot.S")]),t._v(" 中：")]),t._v(" "),a("div",{staticClass:"language-asm6502 extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-asm6502"}},[a("code",[t._v("  # Jump to next instruction, but in "),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("32")]),t._v("-"),a("span",{pre:!0,attrs:{class:"token opcode property"}},[t._v("bit")]),t._v(" code segment.\n  # Switches processor into "),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("32")]),t._v("-"),a("span",{pre:!0,attrs:{class:"token opcode property"}},[t._v("bit")]),t._v(" mode.\n  ljmp    $PROT_MODE_CSEG, $protcseg\n  "),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v(".code32")]),t._v("                     # Assemble for "),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("32")]),t._v("-"),a("span",{pre:!0,attrs:{class:"token opcode property"}},[t._v("bit")]),t._v(" mode\nprotcseg:\n  # Set up the protected-mode data segment registers\n")])])]),a("p",[t._v("这里的 "),a("code",[t._v("protcseg")]),t._v(" 符号（symbol）用来标记位置，可以是一段子程序的起始地址，也可以是一个变量的起始地址。在这里 "),a("code",[t._v("protcseg")]),t._v(" 表示一段程序的起始地址，在编译生成可重定位目标文件（relocatable object file）时其值是不确定的。在链接时，链接器会对这些符号进行替换（因为程序已经链接好了）。")]),t._v(" "),a("p",[t._v("现在的问题是，链接器按照 "),a("code",[t._v("0x8C00")]),t._v(" 的链接起始地址对这些符号进行替换，但 BIOS 还是将 bootloader 读到了内存中的 "),a("code",[t._v("0x7C00")]),t._v(" 处，实模式下（仅开启了段机制），加载地址和链接地址应该是相同的。而现在，"),a("code",[t._v("ljmp")]),t._v(" 指令要跳转到 "),a("code",[t._v("0x8c32")]),t._v(" 处，本来应该跳转到下一条指令 "),a("code",[t._v("0x7c32")]),t._v(" 处。【TODO 需要更加细致的分析！】")]),t._v(" "),a("div",{staticClass:"language-shell-session extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br"),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-shell-session"}},[a("code",[a("span",{pre:!0,attrs:{class:"token output"}},[t._v("(gdb) x/10i 0x7c1e\n   0x7c1e: lgdtw  -0x739c\n   0x7c23: mov    %cr0,%eax\n")]),a("span",{pre:!0,attrs:{class:"token info punctuation"}},[t._v("   0x7c26"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token path"}},[t._v(" or     ")])]),a("span",{pre:!0,attrs:{class:"token command"}},[a("span",{pre:!0,attrs:{class:"token shell-symbol important"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token bash language-bash"}},[t._v("0x1,%eax")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token output"}},[t._v("   0x7c2a: mov    %eax,%cr0\n")]),a("span",{pre:!0,attrs:{class:"token info punctuation"}},[t._v("=> 0x7c2d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token path"}},[t._v(" ljmp   ")])]),a("span",{pre:!0,attrs:{class:"token command"}},[a("span",{pre:!0,attrs:{class:"token shell-symbol important"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token bash language-bash"}},[t._v("0x8,"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$0x8c32")])])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token info punctuation"}},[t._v("   0x7c32"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token path"}},[t._v(" mov    ")])]),a("span",{pre:!0,attrs:{class:"token command"}},[a("span",{pre:!0,attrs:{class:"token shell-symbol important"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token bash language-bash"}},[t._v("0xd88e0010,%eax")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token output"}},[t._v("   0x7c38: mov    %ax,%es\n   0x7c3a: mov    %ax,%fs\n   0x7c3c: mov    %ax,%gs\n   0x7c3e: mov    %ax,%ss\n")])])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Exercise 6")]),t._v(" "),a("p",[t._v("执行 "),a("code",[t._v("x/Nx ADDR")]),t._v(" 打印从 "),a("code",[t._v("ADDR")]),t._v(" 开始的 "),a("code",[t._v("N")]),t._v(" 个 word（在 GNU 汇编标准中，1 word = 2 bytes）。在两个不同的时刻检查 "),a("code",[t._v("0x00100000")]),t._v(" 出的 8 个 word，1）BIOS 将控制权转移给 "),a("code",[t._v("bootloader")]),t._v(" 和 2）"),a("code",[t._v("bootloader")]),t._v(" 将 JOS 内核映像读入内存之后，将控制权转移给 JOS（entry point），有什么不一样，并且为什么这 8 个 word 会不一样？")])]),t._v(" "),a("ol",[a("li",[t._v("关闭 QEMU 和 GDB，重新运行；")]),t._v(" "),a("li",[t._v("设置断点 "),a("code",[t._v("b *0x7c00")]),t._v("（BIOS 将控制权转移给 "),a("code",[t._v("bootloader")]),t._v("）和 "),a("code",[t._v("b *0x7d71")]),t._v("（"),a("code",[t._v("bootloader")]),t._v(" 将控制权转移给 JOS）。")])]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:"/mit-6.828-lab1-figures/ex-6.png",width:"600px",height:"501px",alt:"ex-6"}})]),t._v(" "),a("p",[t._v("前后两次执行 "),a("code",[t._v("x/Nx ADDR")]),t._v(" 结果不一样，第二次是因为我们使用 "),a("code",[t._v("bootloader")]),t._v(" 将 JOS 的程序段（Program Header 中有 "),a("code",[t._v("LOAD")]),t._v(" 标记的段）加载到了 "),a("code",[t._v("0x100000")]),t._v(" 处，因此，从 "),a("code",[t._v("0x100000")]),t._v(" 开始都存放着 "),a("strong",[t._v("JOS 内核映像")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"part-3：the-kernel"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#part-3：the-kernel"}},[t._v("#")]),t._v(" Part 3：The Kernel")]),t._v(" "),a("p",[t._v("操作系统内核一般链接地址都比较大，会选择在高虚拟地址空间上运行，将低虚拟地址空间留给用户程序使用（在 Lab2 中会进行更清晰的解释）。")]),t._v(" "),a("p",[t._v("很多机器的物理内存空间地址都不会到达 "),a("strong",[a("code",[t._v("0xf010002f")])]),t._v("，因此 JOS 内核映像不会真实存储于此，而是，我们使用处理器的内存管理硬件（memory management hardware）将高虚拟地址空间 "),a("strong",[a("code",[t._v("0xf0100000")])]),t._v("（内核的链接地址，期望运行的虚拟地址）映射到实际的低物理地址空间 "),a("strong",[a("code",[t._v("0x00100000")])]),t._v("（内核的加载地址，"),a("code",[t._v("bootloader")]),t._v(" 将内核映像加载进内存中的地址），"),a("code",[t._v("bootloader")]),t._v(" 加载磁盘上的内核映像存放在内存中的地址为 "),a("strong",[a("code",[t._v("0x00100000")])]),t._v("（刚好在 BIOS ROM 的上面，从 1MB 地址往上），可以查看命令 "),a("code",[t._v("i386-elf-objdump -x obj/kern/kernel")]),t._v(" 的返回内容。")]),t._v(" "),a("p",[a("code",[t._v("kern/entrypgdir.c")]),t._v(" 中已经建立好了虚拟地址和物理地址的映射关系 "),a("code",[t._v("entry_pgdir")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("Map VA's [0, 4MB) to PA's [0, 4MB)")]),t._v(" "),a("li",[t._v("Map VA's ["),a("code",[t._v("KERNBASE")]),t._v(", "),a("code",[t._v("KERNBASE")]),t._v("+4MB) to PA's [0, 4MB) 其中，"),a("code",[t._v("KERNBASE=0xF0000000")])])]),t._v(" "),a("p",[t._v("在 "),a("code",[t._v("kern/entry.S")]),t._v(" 中会对 "),a("code",[t._v("CR0_PG")]),t._v(" flag 进行设置，在此设置之前，代码中对内存的引用（memory references）都会被解释为物理地址（更准确的说是线性地址，在 "),a("code",[t._v("boot/boot.S")]),t._v(" 中仅开启段机制，线性地址与物理地址相等），当对 "),a("code",[t._v("CR0_PG")]),t._v(" 设置之后，对内存的引用将被解释为虚拟地址（即开启页机制），再由 "),a("code",[t._v("entry_pgdir")]),t._v(" 翻译为对应的物理地址：")]),t._v(" "),a("ul",[a("li",[t._v("将 "),a("code",[t._v("0xf0000000 ~ 0xf0400000")]),t._v(" 虚拟地址翻译为对应的物理地址 "),a("code",[t._v("0x00000000 ~ 0x00400000")])]),t._v(" "),a("li",[t._v("将 "),a("code",[t._v("0x00000000 ~ 0x00400000")]),t._v(" 虚拟地址翻译为对应的物理地址 "),a("code",[t._v("0x00000000 ~ 0x00400000")])])]),t._v(" "),a("p",[t._v("在内核被加载到内存后系统便立即跳转开始执行 "),a("code",[t._v("kern/entry.S")]),t._v(" 的代码，这个文件中的程序相当于内核的入口程序：")]),t._v(" "),a("div",{staticClass:"language-asm6502 extra-class"},[a("pre",{pre:!0,attrs:{class:"language-asm6502"}},[a("code",[t._v(".globl      _start\n_start = RELOC(entry)\n\n"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v(".globl")]),t._v(" entry\nentry:\n    movw    $"),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token register variable"}},[t._v("x")]),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("1234")]),t._v(","),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token register variable"}},[t._v("x")]),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("472")]),t._v("           # warm boot\n\n    # We haven"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'t set up virtual memory yet, so we'")]),t._v("re running from\n    # the physical address the boot loader loaded the kernel at: "),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("1")]),t._v("MB\n    # (plus "),a("span",{pre:!0,attrs:{class:"token register variable"}},[t._v("a")]),t._v(" few bytes).  However, the C code is linked to run at\n    # KERNBASE+"),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("1")]),t._v("MB.  Hence, we set up "),a("span",{pre:!0,attrs:{class:"token register variable"}},[t._v("a")]),t._v(" trivial page directory that\n    # translates virtual addresses [KERNBASE, KERNBASE+"),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("4")]),t._v("MB) to\n    # physical addresses ["),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),t._v(", "),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("4")]),t._v("MB).  This "),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("4")]),t._v("MB region will be\n    # sufficient until we set up our real page table in mem_init\n    # in lab "),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("2")]),t._v(".\n\n    # Load the physical address of entry_pgdir into cr"),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("3")]),t._v(".  entry_pgdir\n    # is defined in entrypgdir.c.\n    movl    $(RELOC(entry_pgdir)), %eax\n    movl    %eax, %cr"),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("3")]),t._v("\n    # Turn on paging. 开启页机制\n    movl    %cr"),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),t._v(", %eax\n    orl $(CR"),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),t._v("_PE|CR"),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),t._v("_PG|CR"),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),t._v("_WP), %eax\n    movl    %eax, %cr"),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),t._v("\n\n    # Now paging is enabled, but we're still running at "),a("span",{pre:!0,attrs:{class:"token register variable"}},[t._v("a")]),t._v(" low EIP\n    # (why is this okay?).  Jump up above KERNBASE before entering\n    # C code.\n    mov $relocated, %eax  # $relocated 为链接地址，因此需要重定位\n    "),a("span",{pre:!0,attrs:{class:"token opcode property"}},[t._v("jmp")]),t._v(" *%eax\nrelocated:\n\n    # Clear the frame pointer register (EBP)\n    # so that once we get into debugging C code,\n    # stack backtraces will be terminated properly.\n    movl    $"),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token register variable"}},[t._v("x")]),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),t._v(",%ebp           # nuke frame pointer\n\n    # Set the stack pointer\n    movl    $(bootstacktop),%esp\n\n    # now to C code\n    call    i"),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("386")]),t._v("_init\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Exercise 7")]),t._v(" "),a("p",[t._v("使用 QEMU 和 GDB 单步跟踪 JOS，执行到 "),a("code",[t._v("movl %eax, %cr0")]),t._v("，检查在执行这条汇编指令前后内存单元 "),a("code",[t._v("0x00100000")]),t._v(" 和 "),a("code",[t._v("0xf0100000")]),t._v(" 的内容。")])]),t._v(" "),a("ol",[a("li",[t._v("设置断点 "),a("code",[t._v("b *0x7d71")]),t._v("（"),a("code",[t._v("bootloader")]),t._v(" 将控制权转移给 JOS）；")]),t._v(" "),a("li",[a("code",[t._v("si")]),t._v(" 单步跟踪执行。")])]),t._v(" "),a("div",{staticClass:"language-shell-session extra-class"},[a("div",{staticClass:"highlight-lines"},[a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-shell-session"}},[a("code",[a("span",{pre:!0,attrs:{class:"token output"}},[t._v("=> 0x100025:    mov    %eax,%cr0\n(gdb) x/8x 0x00100000\n0x100000:                       0x1badb002 0x00000000 0xe4524ffe 0x7205c766\n0x100010:                       0x34000004 0x0000b812 0x220f0011 0xc0200fd8\n(gdb) x/8x 0xf0100000\n0xf0100000 <_start+4026531828>: 0x00000000 0x00000000 0x00000000 0x00000000\n0xf0100010 <entry+4>:           0x00000000 0x00000000 0x00000000 0x00000000\n(gdb) si\n")]),a("span",{pre:!0,attrs:{class:"token info punctuation"}},[t._v("=> 0x100028"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token path"}},[t._v("    mov    ")])]),a("span",{pre:!0,attrs:{class:"token command"}},[a("span",{pre:!0,attrs:{class:"token shell-symbol important"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token bash language-bash"}},[t._v("0xf010002f,%eax")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token output"}},[t._v("(gdb) x/8x 0x00100000\n0x100000:                       0x1badb002 0x00000000 0xe4524ffe 0x7205c766\n0x100010:                       0x34000004 0x0000b812 0x220f0011 0xc0200fd8\n(gdb) x/8x 0xf0100000\n0xf0100000 <_start+4026531828>: 0x1badb002 0x00000000 0xe4524ffe 0x7205c766\n0xf0100010 <entry+4>:           0x34000004 0x0000b812 0x220f0011 0xc0200fd8\n")])])])]),a("p",[t._v("执行 "),a("code",[t._v("mov %eax, %cr0")]),t._v(" 之后，建立好了虚拟地址和物理地址的映射关系。如果将这条指令给注释掉，重新编译执行，同样设置断点，在 "),a("code",[t._v("0xf010002c <relocated>: add %al,(%eax)")]),t._v(" 处 QEMU 出错退出，出错信息为：“qemu: fatal: Trying to execute code outside RAM or ROM at 0xf010002c”。")]),t._v(" "),a("h3",{attrs:{id:"cprintf-函数的实现（c-语言中常用的-printf-函数）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cprintf-函数的实现（c-语言中常用的-printf-函数）"}},[t._v("#")]),t._v(" "),a("code",[t._v("cprintf")]),t._v(" 函数的实现（C 语言中常用的 "),a("code",[t._v("printf")]),t._v(" 函数）")]),t._v(" "),a("p",[t._v("三个源文件代码的阅读：【TODO 分析并实现 "),a("code",[t._v("printf")]),t._v(" 函数，包括实现浮点数打印】")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("kern/printf.c")]),t._v("：封装格式化输出函数，提供 "),a("code",[t._v("cprintf")]),t._v(" 函数接口；")]),t._v(" "),a("li",[a("code",[t._v("lib/printfmt.c")]),t._v("：格式化字符串输出，需好好学习这个源码文件；")]),t._v(" "),a("li",[a("code",[t._v("kern/console.c")]),t._v("：实现基本的 I/O 操作，提供 "),a("code",[t._v("cputchar")]),t._v("/"),a("code",[t._v("getchar")]),t._v(" 供 "),a("code",[t._v("readline")]),t._v("/"),a("code",[t._v("cprinf")]),t._v(" 使用。")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Exercise 8")]),t._v(" "),a("p",[t._v('填充代码，支持使用 "%o" 打印八进制数（这个很简单，模仿着写，但需理解）。')])]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// (unsigned) octal")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'o'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n            num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getuint")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("ap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lflag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            base "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("goto")]),t._v(" number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("在 "),a("code",[t._v("kern/init.c i386_init()")]),t._v(" 函数中添加测试代码。")]),t._v(" "),a("h3",{attrs:{id:"栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#栈"}},[t._v("#")]),t._v(" 栈")]),t._v(" "),a("p",[t._v("几条与栈相关的汇编指令解释：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("汇编指令")]),t._v(" "),a("th",[t._v("解释")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("pushl %eax")]),t._v(" "),a("td",[t._v("subl $4, %esp; movl %eax, (%esp)")])]),t._v(" "),a("tr",[a("td",[t._v("popl %eax")]),t._v(" "),a("td",[t._v("movl (%esp), %eax; addl $4, %esp")])]),t._v(" "),a("tr",[a("td",[t._v("call 0x1234")]),t._v(" "),a("td",[t._v("pushl %eip; movl 0x1234, %eip")])]),t._v(" "),a("tr",[a("td",[t._v("ret")]),t._v(" "),a("td",[t._v("popl %eip")])])])]),t._v(" "),a("p",[t._v("（注：这里为了解释清晰，右侧指令大都不规范。）")]),t._v(" "),a("p",[a("strong",[t._v("栈的生长方向是高地址到低地址")]),t._v("，"),a("code",[t._v("esp")]),t._v(" 指向栈顶（低地址），"),a("code",[t._v("ebp")]),t._v(" 指向栈底（高地址）。")]),t._v(" "),a("ol",[a("li",[t._v("当进入一个函数（"),a("code",[t._v("callee")]),t._v("）进行执行时，将调用者（"),a("code",[t._v("caller")]),t._v("）的 "),a("code",[t._v("ebp")]),t._v(" 压入栈；")]),t._v(" "),a("li",[t._v("给 "),a("code",[t._v("ebp")]),t._v(" 赋新值为当前 "),a("code",[t._v("esp")]),t._v("（"),a("code",[t._v("ebp")]),t._v(" 为 "),a("code",[t._v("callee")]),t._v(" 的栈帧栈底）。")])]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:"/mit-6.828-lab1-figures/my-func-enter-call.png",width:"823px",height:"216px",alt:"my-func-enter-call"}})]),t._v(" "),a("p",[t._v("现在就建立好了一个"),a("strong",[t._v("函数调用的链接关系")]),t._v("（类似链表），根据当前正在执行的函数找到 "),a("code",[t._v("ebp")]),t._v(" 的值，其为一个地址，该地址中存储的值为调用者的 "),a("code",[t._v("ebp")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("div",{staticClass:"highlight-lines"},[a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("uint32_"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" ebp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("uint32_t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("read_ebp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 得到 callee 的 ebp")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ebp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里可以直接这样写，因为最开始给 ebp 初始化的值为 NULL")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 得到返回值和函数调用的参数，进行处理")]),t._v("\n    ebp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("uint32_t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ebp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对当前 ebp 存储地址解引用就能够得到存储的 caller 的 ebp")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:"/mit-6.828-lab1-figures/stack-frame.png",width:"390px",height:"378px",alt:"stack-frame"}})]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Exercise 9")]),t._v(" "),a("p",[t._v("确定栈是怎么初始化的？")])]),t._v(" "),a("ol",[a("li",[t._v("设置断点 "),a("code",[t._v("b *0x7d71")]),t._v("，"),a("code",[t._v("si")]),t._v(" 单步执行，对应的源码在 "),a("code",[t._v("kern/entry.S")]),t._v("；")]),t._v(" "),a("li",[t._v("对 "),a("code",[t._v("CR0")]),t._v(" 进行设置，开启分页机制，然后执行跳转到 "),a("code",[t._v("relocated")]),t._v(" 标识处开始运行；")]),t._v(" "),a("li",[a("strong",[t._v("将 "),a("code",[t._v("ebp")]),t._v(" 设置为 "),a("code",[t._v("NULL")])]),t._v("（在进行函数调用栈分析的时候使用 "),a("code",[t._v("NULL")]),t._v(" 作为结束标识），在 "),a("code",[t._v(".data")]),t._v(" 段设置的栈顶地址给 "),a("code",[t._v("esp")]),t._v("（高地址，"),a("code",[t._v("0xf0110000")]),t._v("，虚拟地址），预留了栈空间。这里定义了两个全局变量 "),a("code",[t._v("bootstack")]),t._v(" 和 "),a("code",[t._v("bootstacktop")]),t._v("，"),a("code",[t._v("bootstack")]),t._v(" 标识了内存中的一个位置，表示从这里开始的 "),a("code",[t._v("KSTKSIZE")]),t._v(" 个字节的区域都是属于这个临时堆栈的（"),a("code",[t._v("KSTKSIZE")]),t._v(" 在 "),a("code",[t._v("inc/memlayout.h")]),t._v(" 中定义为 32K），"),a("code",[t._v("bootstacktop")]),t._v(" 指向这段区域后的第一个字节，由于刚开始堆栈是空的，所以栈顶便是 "),a("code",[t._v("bootstacktop")]),t._v(" 所指向的位置【TODO 这里还是有点模糊】。"),a("div",{staticClass:"language-asm6502 extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br")]),a("pre",{pre:!0,attrs:{class:"language-asm6502"}},[a("code",[t._v("    relocated:\n\n        # Clear the frame pointer register (EBP)\n        # so that once we get into debugging C code,\n        # stack backtraces will be terminated properly.\n        movl    $"),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token register variable"}},[t._v("x")]),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),t._v(",%ebp           # nuke frame pointer\n\n        # Set the stack pointer\n        movl    $(bootstacktop),%esp\n\n        # now to C code\n        call    i"),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("386")]),t._v("_init\n\n    .data\n    # boot stack\n       .p"),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("2")]),t._v("align    PGSHIFT     # 强制四字节对齐\n       .globl      bootstack\n    bootstack:\n        .space      KSTKSIZE\n       .globl      bootstacktop\n    bootstacktop:\n")])])])]),t._v(" "),a("li",[t._v("调用 "),a("code",[t._v("i386_init")]),t._v(" 函数会将下一条指令的地址压入栈（spin，程序不会运行到这里），同时将旧的 "),a("code",[t._v("ebp")]),t._v(" 压栈，"),a("code",[t._v("ebp")]),t._v(" 指向 "),a("code",[t._v("esp")]),t._v(" 的当前位置，这样就设置好了 JOS 调用第一个 C 函数的栈帧。")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Exercise 10")]),t._v(" "),a("p",[t._v("单步调试查看 "),a("code",[t._v("backtrace")]),t._v(" 函数是怎么递归调用的？")])]),t._v(" "),a("p",[a("code",[t._v("mon_backtrace")]),t._v(" 函数是在 "),a("code",[t._v("test_backtrace")]),t._v(" 函数中被调用的：")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:"/mit-6.828-lab1-figures/recursion.png",width:"473px",height:"273px",alt:"recursion"}})]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Exercise 11")]),t._v(" "),a("p",[a("code",[t._v("mon_backtrace")]),t._v(" 功能实现（查看函数调用栈），将 "),a("code",[t._v("backtrace")]),t._v(" 功能加入 JOS monitor 中。")])]),t._v(" "),a("p",[t._v("函数参数的入栈顺序是从右到左的，即对于函数参数，最后一个参数先入栈，从右至左，第一个参数最后入栈：")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:"/mit-6.828-lab1-figures/func-args-push-order.png",width:"528px",height:"292px",alt:"func-args-push-order"}})]),t._v(" "),a("p",[t._v("正在执行的函数有自己的一个 "),a("code",[t._v("ebp")]),t._v(" 值，而这个 "),a("code",[t._v("ebp")]),t._v(" 作为指针（对应的那块内存）又指向调用该函数的函数的 "),a("code",[t._v("ebp")]),t._v(" 的值，即 "),a("strong",[t._v("callee 的 "),a("code",[t._v("ebp")]),t._v(" 作为指针指向 caller 的 "),a("code",[t._v("ebp")]),t._v(" 值")]),t._v("。这样我们使用 "),a("code",[t._v("ebp")]),t._v(" 不断回溯就能够打印出函数的调用栈了。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mon_backtrace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" argc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("argv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Trapframe")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("tf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    size_t i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" size_t N "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    uint32_t args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("N"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    uint32_t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" ebp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("uint32_t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("read_ebp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ebp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("             "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这个循环终止条件在 ex9 中有解释，movl $0x0,%ebp ")]),t._v("\n        uint32_t eip "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ebp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" N"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ebp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 依次得到各个参数")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cprintf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ebp %08x eip %08x args"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ebp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" eip"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" N"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cprintf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" %08x"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cprintf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        ebp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("uint32_t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ebp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("JOS 启动后会出现“"),a("code",[t._v("K>")]),t._v("”等待用户输入命令，已经提供了“"),a("code",[t._v("help")]),t._v("”和“"),a("code",[t._v("kerninfo")]),t._v("”两个，这里我们需要添加“"),a("code",[t._v("backtrace")]),t._v("”命令。实现原理：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Command")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 命令名")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("desc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 命令作用，help 时展示")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// return -1 to force monitor to exit")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("func"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" argc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" argv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Trapframe")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" tf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Command")]),t._v(" commands"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"help"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Display this list of commands"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mon_help "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"kerninfo"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Display information about the kernel"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mon_kerninfo "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"backtrace"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Display stack backtrace"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mon_backtrace "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("在 "),a("code",[t._v("kern/monitor.c")]),t._v(" 中定义一个 "),a("code",[t._v("Command")]),t._v(" 结构体，包含能够使用的交互命令。主要是第三个参数，表示在 monitor 中键入命令时具体调用的处理函数。")]),t._v(" "),a("p",[t._v("当用户在 monitor 中键入命令时是如何进行处理的呢？")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("monitor")]),t._v(" 函数中调用 "),a("code",[t._v("readline")]),t._v(" 读入一个命令，"),a("code",[t._v("buf")]),t._v(" 指向命令字符串：")])]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    buf "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("readline")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"K> "')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("runcmd")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[a("code",[t._v("runcmd")]),t._v(" 处理命令，接受两个参数，第一个就是命令字符串，第二个参数先不做讨论（跳过）。接下来分析 "),a("code",[t._v("runcmd")]),t._v(" 函数的实现：（"),a("strong",[t._v("这个函数实现要好好学习，Redis 中也有这样的命令查表操作")]),t._v("）")])]),t._v(" "),a("ul",[a("li",[t._v("i) 变量声明与初始化，"),a("code",[t._v("argv")]),t._v(" 是一个指针数组，每个数组项指向一个字符串。一个命令分为命令名+命令参数，因此一个命令字符串一般可以分为多个子字符串，"),a("code",[t._v("argv")]),t._v(" 的每个数组项指向一个子字符串。"),a("code",[t._v("argc")]),t._v(" 代表命令参数的个数：")])]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(' WHITESPACE "\\t\\r\\n "')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("runcmd")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Trapframe")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("tf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" argc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("argv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("MAXARGS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Parse the command buffer into whitespace-separated arguments")]),t._v("\n    argc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    argv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("argc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[t._v("ii) 在 "),a("code",[t._v("argv")]),t._v(" 中保存每一个子字符串，并且将命令字符串中的空格都换成空字符（因为我们在输入命令是，命令名和参数之间、参数和参数之间都是使用空格间隔的），这样处理之后每个子字符串的结尾便都是一个空字符，方便处理；【这个实现需要好好学习】")])]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// gobble whitespace")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("buf "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("strchr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("WHITESPACE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("buf"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 把所有空格字符都置为空字符")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("buf "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 命令结束")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// save and scan past next arg")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("argc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" MAXARGS"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cprintf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Too many arguments (max %d)\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" MAXARGS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        argv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("argc"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指向子字符串")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("buf "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("strchr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("WHITESPACE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            buf"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 跳过非空格的字符")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    argv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("argc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:"/mit-6.828-lab1-figures/runcmd-argv-argc.png",width:"565px",height:"224px",alt:"runcmd-argv-argc"}})]),t._v(" "),a("ul",[a("li",[t._v("iii) 获取到 "),a("code",[t._v("argc")]),t._v(" 和 "),a("code",[t._v("argv")]),t._v(" 两个参数后，就可以开始处理命令了。在所有可以执行的命令表中查找对应的函数，调用执行：")])]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Lookup and invoke the command")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("argc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ARRAY_SIZE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("commands"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("strcmp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("argv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" commands"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" commands"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("argc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" argv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cprintf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"Unknown command '%s'\\n\"")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" argv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Exercise 12")]),t._v(" "),a("p",[t._v("修改 "),a("code",[t._v("mon_backtrace")]),t._v(" 使得其能够打印出当前所在的文件、行号和函数（更方便的查看函数调用栈，以及当程序出错时能够更方便的知道哪些函数可能存在 bug）。")])]),t._v(" "),a("p",[t._v("【TODO】符号表理解，这个如何做的，通过查看 "),a("code",[t._v("debuginfo_eip")]),t._v(" 函数实现大致知道怎么处理，但为什么是这样的呢？需要理解。")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("debuginfo_eip")]),t._v(" 函数中添加行号查找：")])]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("stab_binsearch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stabs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("lline"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rline"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" N_SLINE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" addr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lline "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" rline"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        info"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("eip_line "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" stabs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("lline"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("n_desc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("在 "),a("code",[t._v("mon_trace")]),t._v(" 函数中加入：")])]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br"),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 打印额外的信息：所在文件:行数:所在函数")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Eipdebuginfo")]),t._v(" info"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("debuginfo_eip")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("eip"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("info"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cprintf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"    %s:%d: %.*s+%u\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" info"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("eip_file"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" info"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("eip_line"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            info"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("eip_fn_namelen"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" info"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("eip_fn_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("uint32_t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("eip "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" info"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("eip_fn_addr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cprintf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Error happened when reading symbol table\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"总结遇到的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结遇到的问题"}},[t._v("#")]),t._v(" 总结遇到的问题")]),t._v(" "),a("h2",{attrs:{id:"主要参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#主要参考"}},[t._v("#")]),t._v(" 主要参考")]),t._v(" "),a("ul",[a("li",[t._v("主要参考 "),a("a",{attrs:{href:"http://grid.hust.edu.cn/zyshao/Teaching_Material/OSEngineering/Chapter3.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("系统启动与初始化"),a("OutboundLink")],1),t._v("，为华科的一个老师的课程讲义，现地址已不能访问")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://book.douban.com/subject/3652388/",target:"_blank",rel:"noopener noreferrer"}},[t._v("程序员的自我修养：装载、链接与库"),a("OutboundLink")],1),t._v(" 国人写的一本书，分析的很详细，很有实践意义\n"),a("ul",[a("li",[t._v("第 2 章 编译与链接 2.4 模块拼装——静态链接")]),t._v(" "),a("li",[t._v("第 3 章 目标文件里有什么")]),t._v(" "),a("li",[t._v("第 4 章 静态链接")])])]),t._v(" "),a("li",[a("a",{attrs:{href:"https://book.douban.com/subject/26912767/",target:"_blank",rel:"noopener noreferrer"}},[t._v("深入理解计算机系统"),a("OutboundLink")],1),t._v(" 第 7 章 链接 之前看过好几遍，需要理解")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.zhihu.com/question/58121772/answer/156287959",target:"_blank",rel:"noopener noreferrer"}},[t._v("Linux 内核应该怎么去学习？"),a("OutboundLink")],1),t._v(" 如陈硕所说，“学习操作系统要注意区分共性与平台特性”")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://segmentfault.com/a/1190000007977460",target:"_blank",rel:"noopener noreferrer"}},[t._v("C函数调用过程原理及函数栈帧分析"),a("OutboundLink")],1),t._v(" 函数调用和栈帧讲解的很清晰")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://pdos.csail.mit.edu/6.828/2018/lec/gdb_slides.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Using the GNU Debugger"),a("OutboundLink")],1),t._v(" MIT 6.828 LEC 3 课程讲义")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.jianshu.com/p/af9d7eee635e",target:"_blank",rel:"noopener noreferrer"}},[t._v("mit6.828-lab1 系统启动"),a("OutboundLink")],1),t._v(" 简单的过了一遍，之后可以仔细梳理一下")])]),t._v(" "),a("h2",{attrs:{id:"附录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#附录"}},[t._v("#")]),t._v(" 附录")]),t._v(" "),a("h3",{attrs:{id:"附录-1：cprintf-函数的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#附录-1：cprintf-函数的实现"}},[t._v("#")]),t._v(" 附录 1："),a("code",[t._v("cprintf()")]),t._v(" 函数的实现")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cprintf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    va_list ap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" cnt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("va_start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    cnt "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("vcprintf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("va_end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" cnt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("这里引用 K&R 7.3 变长参数表，省略号表示参数表中的数量和类型是可变的，只能出现在参数表的尾部。如何去处理一个没有名字的参数表呢？头文件 "),a("code",[t._v("<inc/stdarg.h>")]),t._v(" 中包含一组宏定义，对如何遍历参数表进行了定义（该头文件的实现因不同的机器而不同，但提供的接口是一致的）")]),t._v(" "),a("ul",[a("li",[a("strong",[a("code",[t._v("va_list")])]),t._v(" 类型用于声明一个变量，变量 "),a("code",[t._v("ap")]),t._v("（argument pointer，参数指针）将依次引用各参数，宏 "),a("strong",[a("code",[t._v("va_start")])]),t._v(" 将 "),a("code",[t._v("ap")]),t._v(" 初始化为指向第一个无名参数的指针；")]),t._v(" "),a("li",[t._v("在使用 "),a("code",[t._v("ap")]),t._v(" 之前，宏 "),a("strong",[a("code",[t._v("va_start")])]),t._v(" 必须被调用一次；")]),t._v(" "),a("li",[t._v("参数表必须至少包括一个有名参数（例如这里的 "),a("code",[t._v("fmt")]),t._v("，它是第一个有名参数，同时也是最后一个有名参数，其后就是无名参数了），宏 "),a("strong",[a("code",[t._v("va_start")])]),t._v(" 将最后一个有名参数作为起点；")]),t._v(" "),a("li",[t._v("每次调用 "),a("strong",[a("code",[t._v("va_arg")])]),t._v(" 该函数都将返回一个参数，并将 "),a("code",[t._v("ap")]),t._v(" 指向下一个参数。宏 "),a("strong",[a("code",[t._v("va_arg")])]),t._v(" 使用一个类型名来决定返回的对象类型、指针移动的步长；")]),t._v(" "),a("li",[t._v("最后，必须在函数返回前调用宏 "),a("strong",[a("code",[t._v("va_end")])]),t._v("，以完成一些必要的清理工作。")])]),t._v(" "),a("p",[t._v("函数的参数实际上都是存放在内存的堆栈中的，"),a("strong",[t._v("函数参数从右向左依次入栈")]),t._v("（由于内存栈的增长方向是从高地址到低地址，因此参数表前面的有名参数在堆栈的较低地址处），每个参数根据参数类型分配相应大小的栈空间。使用 "),a("strong",[a("code",[t._v("va_start")])]),t._v(" 宏初始化 "),a("code",[t._v("ap")]),t._v(" 之后，"),a("code",[t._v("ap")]),t._v(" 就指向第一个可变参数。其后我们就可以通过调用 "),a("strong",[a("code",[t._v("va_arg")])]),t._v(" 宏一次读取之后的可变参数。")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:"/mit-6.828-lab1-figures/cprintf-ap.png",width:"421px",height:"288px",alt:"cprintf-ap"}})]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("vcprintf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" va_list ap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" cnt "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("vprintfmt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("putch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("cnt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" cnt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("函数 "),a("code",[t._v("vprintfmt")]),t._v(" 各参数依次为：")]),t._v(" "),a("ul",[a("li",[t._v("函数指针，这里指向 putch，将一个字符输出在屏幕上")]),t._v(" "),a("li",[t._v("输出的字符数")]),t._v(" "),a("li",[t._v("格式化字符串指针")]),t._v(" "),a("li",[t._v("可变参数指针")])]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("putch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" ch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("cnt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cputchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("cnt"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("code",[t._v("ch")]),t._v(" 代表要输出的字符，"),a("code",[t._v("int")]),t._v(" 类型变量\b 32 位，而一个 ASCII 字符只需要 8 位，因此 "),a("code",[t._v("int")]),t._v(" 类型的低 8 位表示字符对应的 ASCII 码，而第 8 到 15 位表示输出字符的格式（高 16 位是没有用的）；"),a("code",[t._v("cnt")]),t._v(" 指向一个 "),a("code",[t._v("int")]),t._v(" 变量，每次往屏幕上输出一个字符就加 1（记录输出字符的个数）")]),t._v(" "),a("p",[t._v("为了在屏幕上输出一个字符，依次调用函数 "),a("code",[t._v("putch -> cputchar -> cons_putc -> lpt_putc -> cga_putc")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("lpt_putc")]),t._v(" 做一些输出字符前的准备工作（硬件初始化）")]),t._v(" "),a("li",[a("code",[t._v("cga_putc")]),t._v(" 在屏幕上打印一个字符，接受 "),a("code",[t._v("int")]),t._v(" 类型的参数，没有返回值")])]),t._v(" "),a("p",[t._v("【TODO】需要查看 "),a("code",[t._v("vprintfmt")]),t._v(" 是怎么实现的？")]),t._v(" "),a("h3",{attrs:{id:"附录-2：大端和小端"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#附录-2：大端和小端"}},[t._v("#")]),t._v(" 附录 2：大端和小端")]),t._v(" "),a("blockquote",[a("p",[t._v("程序员的自我修养——链接、装载与库 附录 A.1  字节序（Byte Order）")])]),t._v(" "),a("p",[t._v("在不同的计算机体系结构中，对于数据（比特、字节、字）等的存储和传输机制有所不同，因而引发了计算机领域中一个潜在但是又重要的问题，即通信双方交流的信息单元应该以怎样的顺序进行传送。目前在各种体系的计算机中通常采用的字节存储机制主要有两种：大端（big-endian）和小端（little-endian）。")]),t._v(" "),a("p",[t._v("首先我们需要理解两个概念："),a("code",[t._v("MSB")]),t._v("（Most Significant Bit/Byte）最重要的位或最重要的字节，对应的，"),a("code",[t._v("LSB")]),t._v("（Least Significant Bit/Byte）最不重要的位或最不重要的字节")]),t._v(" "),a("p",[t._v("比如对于一个十六进制整数 "),a("code",[t._v("0x12345678")]),t._v("，"),a("code",[t._v("0x12")]),t._v(" 就是 "),a("code",[t._v("MSB")]),t._v("，"),a("code",[t._v("0x78")]),t._v(" 就是 "),a("code",[t._v("LSB")]),t._v("。对于 "),a("code",[t._v("0x78")]),t._v(" 这个字节，二进制表示为 "),a("code",[t._v("01111000")]),t._v("，最左边的 "),a("code",[t._v("0")]),t._v(" 就是 "),a("code",[t._v("MSB")]),t._v("，最右边的 "),a("code",[t._v("0")]),t._v(" 就是 "),a("code",[t._v("LSB")])]),t._v(" "),a("ul",[a("li",[t._v("大端（big-endian）规定："),a("code",[t._v("MSB")]),t._v(" 在存储时放在低地址，在传输时 "),a("code",[t._v("MSB")]),t._v(" 放在流的开始；"),a("code",[t._v("LSB")]),t._v(" 在存储时放在高地址，在传输时 "),a("code",[t._v("LSB")]),t._v(" 放在流的末尾")]),t._v(" "),a("li",[t._v("小端（little-endian）规定："),a("code",[t._v("MSB")]),t._v(" 在存储时放在高地址，在传输时 "),a("code",[t._v("MSB")]),t._v(" 放在流的末尾；"),a("code",[t._v("LSB")]),t._v(" 在存储时放在低地址，在传输时 "),a("code",[t._v("LSB")]),t._v(" 放在流的开始")])]),t._v(" "),a("h3",{attrs:{id:"附录-3：bootloader-实模式切换到保护模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#附录-3：bootloader-实模式切换到保护模式"}},[t._v("#")]),t._v(" 附录 3："),a("code",[t._v("bootloader")]),t._v(" 实模式切换到保护模式")]),t._v(" "),a("div",{staticClass:"language-asm6502 extra-class"},[a("pre",{pre:!0,attrs:{class:"language-asm6502"}},[a("code",[a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v(".globl")]),t._v(" start\nstart:\n  "),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v(".code16")]),t._v("                     # Assemble for "),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("16")]),t._v("-"),a("span",{pre:!0,attrs:{class:"token opcode property"}},[t._v("bit")]),t._v(" mode\n  "),a("span",{pre:!0,attrs:{class:"token opcode property"}},[t._v("cli")]),t._v("                         # Disable interrupts\n  "),a("span",{pre:!0,attrs:{class:"token opcode property"}},[t._v("cld")]),t._v("                         # String operations increment\n\n  # Set up the important data segment registers (DS, ES, SS).\n  xorw    %ax,%ax             # Segment number zero\n  movw    %ax,%ds             # -> Data Segment\n  movw    %ax,%es             # -> Extra Segment\n  movw    %ax,%ss             # -> Stack Segment\n")])])]),a("p",[a("code",[t._v(".code16")]),t._v(" 表示为 16 位的实模式，"),a("code",[t._v("cli")]),t._v(" 表示屏蔽系统中断，"),a("code",[t._v("cld")]),t._v(" 置 DF (Direction Flag) 标识位为 0，表示内存地址向高地址增加，之后清空 DS 、ES 、SS 等段寄存器中的内容为 0。")]),t._v(" "),a("div",{staticClass:"language-asm6502 extra-class"},[a("pre",{pre:!0,attrs:{class:"language-asm6502"}},[a("code",[t._v("  # Enable "),a("span",{pre:!0,attrs:{class:"token register variable"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("20")]),t._v(":\n  #   For backwards compatibility with the earliest PCs, physical\n  #   address line "),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("20")]),t._v(" is tied low, so that addresses higher than\n  #   "),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("1")]),t._v("MB wrap around to zero by default.  This code undoes this.\nseta"),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("20")]),t._v("."),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("1")]),t._v(":\n  # 表示从"),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token register variable"}},[t._v("x")]),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("64")]),t._v("端口读取一个字节的数据存入al寄存器中，"),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token register variable"}},[t._v("x")]),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("64")]),t._v("作为状态寄存器，\n  # 保存了当前状态，判断读取的数据位"),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("1")]),t._v("（索引从"),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),t._v("开始）是否等于"),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("1")]),t._v("，如果为"),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("1")]),t._v("则说明\n  # 输入缓冲器满（"),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token register variable"}},[t._v("x")]),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("60")]),t._v("/"),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("64")]),t._v("口有给"),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("8042")]),t._v("的数据）（注：testb测试字节，与操作）\n  inb     $"),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token register variable"}},[t._v("x")]),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("64")]),t._v(",%al               # Wait for not busy\n  testb   $"),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token register variable"}},[t._v("x")]),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("2")]),t._v(",%al\n  jnz     seta"),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("20")]),t._v("."),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("1")]),t._v("\n\n  # 表示写"),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("8042")]),t._v("的输出端口P"),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("2")]),t._v("，将al的数据写入"),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token register variable"}},[t._v("x")]),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("64")]),t._v("端口\n  movb    $"),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),t._v("xd"),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("1")]),t._v(",%al               # "),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),t._v("xd"),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("1")]),t._v(" -> port "),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token register variable"}},[t._v("x")]),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("64")]),t._v("\n  outb    %al,$"),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token register variable"}},[t._v("x")]),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("64")]),t._v("\n\nseta"),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("20")]),t._v("."),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("2")]),t._v(":\n  inb     $"),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token register variable"}},[t._v("x")]),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("64")]),t._v(",%al               # Wait for not busy\n  testb   $"),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token register variable"}},[t._v("x")]),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("2")]),t._v(",%al\n  jnz     seta"),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("20")]),t._v("."),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("2")]),t._v("\n\n  # 写入P"),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("2")]),t._v("，"),a("span",{pre:!0,attrs:{class:"token register variable"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("20")]),t._v(" Gate置为"),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("1")]),t._v("，至此就开通了"),a("span",{pre:!0,attrs:{class:"token register variable"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("20")]),t._v("地址线\n  movb    $"),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),t._v("xdf,%al               # "),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),t._v("xdf -> port "),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token register variable"}},[t._v("x")]),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("60")]),t._v("\n  outb    %al,$"),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token register variable"}},[t._v("x")]),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("60")]),t._v("\n")])])]),a("p",[t._v("Intel 推出 x86 架构已近 30 年，刚开始推出的 8086 处理器是一款 16 位的处理器，它标识着 x86 架构的诞生，这种 16 位处理器的数据总线是 16 位的，而地址总线是 20 位的，最多可以寻址 1M 的地址空间。这里有一个为难的问题了，20 根地址总线，所以可以访问的地址是 "),a("code",[t._v("2^20 = 1MB")]),t._v("，但由于是 16 位地址模式，能够表示的地址范围是 0-64KB，为了在 8086 下能够访问 1MB 内存，Intel 采取了分段的模式，即 16 位段基地址，16 位偏移。但这个方式有一个问题，其最大的访问空间为 "),a("code",[t._v("0xFFFF")]),t._v(" : "),a("code",[t._v("0xFFFF = 0x10FFEF = 1MB + 64KB - 16Bytes")]),t._v("，8086 只有 20 根地址线，如果访问 "),a("code",[t._v("100000h - 10FFEFh")]),t._v(" 之间的内存单元，则必须有第 21 根地址线。因此，设置的机制为，当程序员给出超过 1MB（"),a("code",[t._v("100000h - 10FFEFh")]),t._v("）的地址时，系统不会认为其访问越界而产生异常，而是自动重新从 0 开始计算。之后的 80286 处理器也是 16 位，但地址总线有 24 位，而且从 80286 开始 CPU 演变出两种工作模式：实模式和保护模式。在实模式下，80286 和其后续系统所表现的行为应该和 8086 所表现的完全一样（向后兼容），但是，80286 芯片却存在一个 Bug：如果程序员访问 "),a("code",[t._v("100000h - 10FFEFh")]),t._v(" 之间的内存单元，系统会实际访问这块内存，而不是重新从 0 开始。为了解决这个问题，IBM 使用键盘控制器上剩余的一些输出线来管理第 21 根地址线，即 A20 Gate。如果 A20 Gate 被打开, 则当程序员给出 "),a("code",[t._v("100000h - 10FFEFh")]),t._v(" 之间的地址时，系统将真正访问这块内存区域；如果 A20 Gate 被禁止，则当程序员给出 "),a("code",[t._v("100000h - 10FFEFh")]),t._v(" 之间的地址的时候,系统仍然使用 8086 的方式。")]),t._v(" "),a("p",[t._v("从 80286 开始，系统出现了一种新的机制，被称为保护模式。那为什么进入保护模式一定要打开 A20 呢，它对保护模式有什么影响？如果 A20 Gate 被禁止，对于 80286 来说，其地址为 24bit，其地址表示为 "),a("code",[t._v("EFFFFF")]),t._v("；对于 80386 极其随后的 32-bit 芯片来说，其地址表示为 "),a("code",[t._v("FFEFFFFF")]),t._v("。这种表示的意思是，如果 A20 Gate 被禁止，则其第 20-bit 在 CPU 做地址访问的时候是无效的，永远只能被作为 0；如果 A20 Gate 被打开，则其第 20-bit 是有效的，其值既可以为 0，也可以为 1。")]),t._v(" "),a("p",[t._v("至此，我们跟踪历史，明晰了当从实模式切换至保护模式时需要将 A20 Gate 打开，上述代码实现了如何打开 A20 地址线。")]),t._v(" "),a("div",{staticClass:"language-asm6502 extra-class"},[a("pre",{pre:!0,attrs:{class:"language-asm6502"}},[a("code",[t._v("  # Switch from real to protected mode, using "),a("span",{pre:!0,attrs:{class:"token register variable"}},[t._v("a")]),t._v(" bootstrap GDT\n  # "),a("span",{pre:!0,attrs:{class:"token opcode property"}},[t._v("and")]),t._v(" segment translation that makes virtual addresses\n  # identical to their physical addresses, so that the\n  # effective memory map does not change during the switch.\n  lgdt    gdtdesc    # 将GDT表的首地址加载到GDTR\n\n# Bootstrap GDT\n"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v(".p2align")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("2")]),t._v("                                # force "),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("4")]),t._v(" byte alignment\ngdt:\n  SEG_NULL                                # null seg\n  SEG(STA_X|STA_R, "),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token register variable"}},[t._v("x")]),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),t._v(", "),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),t._v("xffffffff)       # code seg\n  SEG(STA_W, "),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token register variable"}},[t._v("x")]),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),t._v(", "),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),t._v("xffffffff)             # data seg\n\ngdtdesc:\n  "),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v(".word")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token register variable"}},[t._v("x")]),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("17")]),t._v("                            # sizeof(gdt) - "),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("1")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v(".long")]),t._v("   gdt                             # address gdt\n")])])]),a("p",[t._v("定义 GDT 全局描述符表。首先我们可以看到 GDT 表的存放位置是 4 字节对齐的，也就是说 GDT 表的物理首地址是 4 的倍数。然后 "),a("code",[t._v("gdt")]),t._v(" 标识了 3 个 GDT 表项，使用宏 "),a("code",[t._v("SEG_NULL")]),t._v(" 和 "),a("code",[t._v("SEG")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-asm6502 extra-class"},[a("pre",{pre:!0,attrs:{class:"language-asm6502"}},[a("code",[t._v("#define SEG_NULL                        \\\n    "),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v(".word")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),t._v(", "),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v(";                         \\")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v(".byte")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),t._v(", "),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),t._v(", "),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),t._v(", "),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),t._v("\n#define SEG(type,base,lim)              \\\n    "),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v(".word")]),t._v(" (((lim) >> "),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("12")]),t._v(") & "),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),t._v("xffff), ((base) & "),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),t._v("xffff)"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v(";  \\")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v(".byte")]),t._v(" (((base) >> "),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("16")]),t._v(") & "),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),t._v("xff), ("),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token register variable"}},[t._v("x")]),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("90")]),t._v(" | (type)),     \\\n        ("),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),t._v("xC"),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),t._v(" | (((lim) >> "),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("28")]),t._v(") & "),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),t._v("xf)), (((base) >> "),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("24")]),t._v(") & "),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),t._v("xff)\n")])])]),a("p",[a("code",[t._v("SEG_NULL")]),t._v(" 定义连续 8 个值为 0 的字节，这就表示一个空的 GDT 表项。"),a("code",[t._v("SEG")]),t._v(" 宏 "),a("code",[t._v("type")]),t._v(" 表示段属性，"),a("code",[t._v("base")]),t._v(" 表示段基址，"),a("code",[t._v("lim")]),t._v(" 则表示段长的界限，给出这三个参数就可以用这个宏来定义一个 GDT 表项（具体含义略过）。")]),t._v(" "),a("div",{staticClass:"language-asm6502 extra-class"},[a("pre",{pre:!0,attrs:{class:"language-asm6502"}},[a("code",[a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v(".set")]),t._v(" CR"),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),t._v("_PE_ON,      "),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token register variable"}},[t._v("x")]),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("1")]),t._v("         # protected mode enable flag\n\n  movl    %cr"),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),t._v(", %eax\n  orl     $CR"),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),t._v("_PE_ON, %eax\n  movl    %eax, %cr"),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),t._v("\n")])])]),a("p",[t._v("使能保护模式，将一个特定的寄存器，系统寄存器 "),a("code",[t._v("CR0")]),t._v(" 其第 0 号位置成 1。这里的 "),a("code",[t._v("orl")]),t._v(" 是“按位或”操作指令，常用来测试两个操作数是否同时为0，或者用来置位某些位，置位就是将一个位数据设置为 1。")]),t._v(" "),a("div",{staticClass:"language-asm6502 extra-class"},[a("pre",{pre:!0,attrs:{class:"language-asm6502"}},[a("code",[a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v(".set")]),t._v(" PROT_MODE_CSEG, "),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token register variable"}},[t._v("x")]),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("8")]),t._v("         # kernel code segment selector\n\n  # Jump to next instruction, but in "),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("32")]),t._v("-"),a("span",{pre:!0,attrs:{class:"token opcode property"}},[t._v("bit")]),t._v(" code segment.\n  # Switches processor into "),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("32")]),t._v("-"),a("span",{pre:!0,attrs:{class:"token opcode property"}},[t._v("bit")]),t._v(" mode.\n  ljmp    $PROT_MODE_CSEG, $protcseg\n")])])]),a("p",[t._v("最后，用一个跳转指令让系统开始使用 32 位的寻址模式。可以看到最后一句长跳转指令实际上是在系统进入保护模式后执行的。于是在这里 "),a("code",[t._v("$PROT_MODE_CSEG")]),t._v(" ，代表的是段选择子，从前面的 GDT 表中可以看到基地址是 "),a("code",[t._v("0x0")]),t._v("，而偏移地址是"),a("code",[t._v("$protcseg")]),t._v("，"),a("code",[t._v("$protcseg")]),t._v(" 实际上代表的是接下来指令的链接地址，也就是可执行程序在内存中的虚拟地址，只是刚好在这里编译生成的可执行程序 "),a("code",[t._v("boot")]),t._v(" 的加载地址与链接地址是一致的，于是 "),a("code",[t._v("$protcseg")]),t._v(" 就相当于指令在内存中存放位置的物理地址，所以这个长跳转可以成功的跳转到下一条指令的位置。")]),t._v(" "),a("div",{staticClass:"language-asm6502 extra-class"},[a("pre",{pre:!0,attrs:{class:"language-asm6502"}},[a("code",[a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v(".set")]),t._v(" PROT_MODE_DSEG, "),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token register variable"}},[t._v("x")]),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("10")]),t._v("         # kernel data segment selector\n\n  "),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v(".code32")]),t._v("                         # Assemble for "),a("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("32")]),t._v("-"),a("span",{pre:!0,attrs:{class:"token opcode property"}},[t._v("bit")]),t._v(" mode\nprotcseg:\n  # Set up the protected-mode data segment registers\n  movw    $PROT_MODE_DSEG, %ax    # Our data segment selector\n  movw    %ax, %ds                # -> DS: Data Segment\n  movw    %ax, %es                # -> ES: Extra Segment\n  movw    %ax, %fs                # -> FS\n  movw    %ax, %gs                # -> GS\n  movw    %ax, %ss                # -> SS: Stack Segment\n\n  # Set up the stack pointer "),a("span",{pre:!0,attrs:{class:"token opcode property"}},[t._v("and")]),t._v(" call into C.\n  movl    $start, %esp\n  call bootmain\n")])])]),a("p",[t._v("在进入保护模式后，程序在重新对段寄存器进行了初始化后，设置栈的指针并转入 C 函数 "),a("code",[t._v("bootmain")]),t._v(" 执行（"),a("code",[t._v("ebp <- 0")]),t._v("、"),a("code",[t._v("esp <- 0x7c00")]),t._v(" 栈 从高地址向低地址顺序存放 ）。可以看到，在 "),a("code",[t._v("call bootmain")]),t._v(" 之后便是一个无限循环的跳转指令，之所以是无限循环就是这个函数调用永远都不会有返回的可能性，这句程序仅仅只是让整个代码看起来有完整性。")])])}),[],!1,null,null,null);s.default=n.exports}}]);