(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{260:function(t,e,s){"use strict";s.r(e);var a=s(29),v=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"git-是如何存储信息的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-是如何存储信息的"}},[t._v("#")]),t._v(" Git 是如何存储信息的")]),t._v(" "),s("ul",[s("li",[s("code",[t._v(".git Directory & Working Directory")]),t._v("："),s("code",[t._v(".git")]),t._v(" 目录是 Git 存储信息和操作信息的目录，"),s("code",[t._v("Working Directory")]),t._v(" 是我们实际操作的目录")]),t._v(" "),s("li",[s("code",[t._v("Object")]),t._v("：Git 对象，文件、目录和提交记录都会以 Git Object 的格式存储在 "),s("code",[t._v(".git")]),t._v(" 目录中")]),t._v(" "),s("li",[s("code",[t._v("Reference")]),t._v("：Git 引用，分支、远程分支、tag 的索引都是以 Git Reference 的形式存储的，本质是一个包含 SHA1 值的 40 个字符的 16 进制字符串")]),t._v(" "),s("li",[s("code",[t._v("SHA1")]),t._v("：所有的文件内容都会通过该算法计算出其 SHA1 值，作为 Git 对象的文件名")]),t._v(" "),s("li",[s("code",[t._v("plumbing & procelain")]),t._v("：Git 的命令分类方式，前者是晦涩的底层命令，直接操作文件，后者是面向版本管理的高级命令")])]),t._v(" "),s("h2",{attrs:{id:"git-目录结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-目录结构"}},[t._v("#")]),t._v(" .git 目录结构")]),t._v(" "),s("p",[s("code",[t._v("objects/[sha1-前两位]/[sha1-剩余值]")])]),t._v(" "),s("div",{staticClass:"language-markdown extra-class"},[s("pre",{pre:!0,attrs:{class:"language-markdown"}},[s("code",[t._v("- "),s("span",{pre:!0,attrs:{class:"token code keyword"}},[t._v("`git init`")]),t._v("\n- "),s("span",{pre:!0,attrs:{class:"token code keyword"}},[t._v("`echo '111' > a.txt`")]),t._v("\n- "),s("span",{pre:!0,attrs:{class:"token code keyword"}},[t._v("`git add a.txt`")]),t._v("\n  - "),s("span",{pre:!0,attrs:{class:"token code keyword"}},[t._v("`objects/[sha1-前两位]/[sha1-剩余值]`")]),t._v("  新建一个 "),s("span",{pre:!0,attrs:{class:"token code keyword"}},[t._v("`blob`")]),t._v(" 类型文件\n  - "),s("span",{pre:!0,attrs:{class:"token code keyword"}},[t._v("`index`")]),t._v(" 暂存区\n- "),s("span",{pre:!0,attrs:{class:"token code keyword"}},[t._v('`git commit -m "first commit"`')]),t._v("\n  - "),s("span",{pre:!0,attrs:{class:"token code keyword"}},[t._v("`objects/`")]),t._v(" 下新建两个文件\n  - "),s("span",{pre:!0,attrs:{class:"token code keyword"}},[t._v("`commit`")]),t._v(" 类型，组成了一个树型结构\n  - "),s("span",{pre:!0,attrs:{class:"token code keyword"}},[t._v("`tree`")]),t._v(" 类型\n- "),s("span",{pre:!0,attrs:{class:"token code keyword"}},[t._v("`cat .git/HEAD`")]),t._v(" 返回 "),s("span",{pre:!0,attrs:{class:"token code keyword"}},[t._v("`ref: refs/heads/master`")]),t._v("\n- "),s("span",{pre:!0,attrs:{class:"token code keyword"}},[t._v("`cat .git/refs/heads/master`")]),t._v(" 返回 "),s("span",{pre:!0,attrs:{class:"token code keyword"}},[t._v("`sha1`")]),t._v(" 值\n")])])]),s("p",[t._v("HEAD、分支、普通的 Tag 可以")]),t._v(" "),s("p",[t._v("查看 "),s("code",[t._v("SHA1")]),t._v(" 对应的文件类型和内容：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("git cat-file -t [sha1-至少前四位]")]),t._v(" 查看类型，对应有 "),s("code",[t._v("blob")])]),t._v(" "),s("li",[s("code",[t._v("git cat-file -p [sha1-至少前四位]")]),t._v(" 查看内容\n"),s("ul",[s("li",[s("code",[t._v("commit")]),t._v(" 类型对应 "),s("code",[t._v("commit message")])])]),t._v(" "),s("div",{staticClass:"language-shell-session extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell-session"}},[s("code",[s("span",{pre:!0,attrs:{class:"token output"}},[t._v("tree f253233a1a0e59f33115daca3fa494eaa20758d8\nauthor qiaoin <qiao.liubing@gmail.com> 1577959020 +0800\ncommitter qiaoin <qiao.liubing@gmail.com> 1577959020 +0800\n\nfirst commit, a.txt\n")])])])]),s("ul",[s("li",[s("code",[t._v("tree")]),t._v(" 类型")])]),t._v(" "),s("div",{staticClass:"language-shell-session extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell-session"}},[s("code",[s("span",{pre:!0,attrs:{class:"token output"}},[t._v("100644 blob 58c9bdf9d017fcd178dc8c073cbfcbb7ff240d6c\ta.txt\n")])])])]),s("ul",[s("li",[s("code",[t._v("blob")]),t._v(" 类型对应文件内容")])]),t._v(" "),s("div",{staticClass:"language-shell-session extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell-session"}},[s("code",[s("span",{pre:!0,attrs:{class:"token output"}},[t._v("111\n")])])])])])]),t._v(" "),s("h2",{attrs:{id:"常用命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用命令"}},[t._v("#")]),t._v(" 常用命令")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("git reflog")])]),t._v(" "),s("li",[s("code",[t._v("git stash push [-u | --include-untracked]")]),t._v(" 获得干净的工作区")]),t._v(" "),s("li",[s("code",[t._v("git filter-branch --tree-filter 'rm -f pass.txt' HEAD")]),t._v(" 从 Git 历史中删除一个文件，例如敏感信息（私钥、内网 IP），或者不需要版本控制的超大文件")]),t._v(" "),s("li",[s("code",[t._v("git commit --amend")]),t._v(" 修改 commit message")]),t._v(" "),s("li",[s("code",[t._v("git rebase -i origin/master")]),t._v(" 在 git push 到远端仓库之前，交互式修改 commit message")]),t._v(" "),s("li",[s("code",[t._v("git show-branch")]),t._v(" 查看两个分支的区别")]),t._v(" "),s("li",[s("code",[t._v("git blame")]),t._v(" 查看每一行代码的最后一次变更")]),t._v(" "),s("li",[s("code",[t._v("git bisect")])])]),t._v(" "),s("h2",{attrs:{id:"工作流"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#工作流"}},[t._v("#")]),t._v(" 工作流")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("git checkout master")])]),t._v(" "),s("li",[s("code",[t._v("git pull")])]),t._v(" "),s("li",[s("code",[t._v("git checkout dev")])]),t._v(" "),s("li",[s("code",[t._v("git stash")])]),t._v(" "),s("li",[s("code",[t._v("git rebase master")])]),t._v(" "),s("li",[s("code",[t._v("git stash pop")])])]),t._v(" "),s("h2",{attrs:{id:"更多问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#更多问题"}},[t._v("#")]),t._v(" 更多问题")]),t._v(" "),s("ul",[s("li",[t._v("为什么取 "),s("code",[t._v("SHA1")]),t._v(" 的前两位作为目录，后 38 位作为文件名？")]),t._v(" "),s("li",[t._v("Git 为什么使用 "),s("code",[t._v("blob")]),t._v(" 的形式存储内容？")]),t._v(" "),s("li",[s("code",[t._v("plumbing")]),t._v(" 和 "),s("code",[t._v("porcelain")]),t._v(" 命名的含义是什么")]),t._v(" "),s("li",[t._v("Git 如何提高存储效率(比如大文件 A 稍作修改，其实就会有另外一个及其相似的备份，十分浪费空间)?")]),t._v(" "),s("li",[t._v("Git 如何处理分布式协作开发?")]),t._v(" "),s("li",[t._v("Git 在实际项目中的最佳实践是什么？")])])])}),[],!1,null,null,null);e.default=v.exports}}]);